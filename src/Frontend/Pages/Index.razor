@page "/"
@using RepositoryAnalysis
@using RepositoryAnalysis.Model
@inject IDialogService DialogService
@inject AnalysisService AnalysisService
<PageTitle>Github Repository Analysis</PageTitle>

<MudPaper Height="250px" Width="100%" Class="mb-4 pb-4" Elevation="5">
    <MudContainer MaxWidth="MaxWidth.Medium">

        <MudItem Class="mt-2 pt-2">
            <MudTextField Disabled="@LockUI" InputType="InputType.Url"
                          Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.Search"
                          AdornmentColor="Color.Primary"
                          OnAdornmentClick="OnSubmit"
                          InputMode="InputMode.url"
                          HelperText="Enter a github repository url and scan for any issues"
                          @bind-Value="RepositoryUrl" Label="https://github.com/owner/repo" Variant="Variant.Outlined">
            </MudTextField>
            @* <MudTextField Disabled="@LockUI" *@
            @*               InputType="InputType.Text" *@
            @*               Adornment="Adornment.End" *@
            @*               AdornmentIcon="@Icons.Filled.Sailing" *@
            @*               AdornmentColor="Color.Primary" *@
            @*               OnAdornmentClick="OnSubmitDebug" *@
            @*               InputMode="InputMode.url" *@
            @*               @bind-Value="Topic" *@
            @*               Variant="Variant.Outlined"> *@
            @* </MudTextField> *@
        </MudItem>

        <MudProgressLinear Class=@(LockUI ? "" : "invisible") Color="Color.Primary" Size="Size.Large" Indeterminate="true"/>
        <br/>
       
        <MudText Align="Align.Center">Try these examples: </MudText>
        <MudButton Disabled="@LockUI" Color="Color.Info" Size="Size.Small" OnClick='() => OnExampleSubmit("https://github.com/dotnet/runtime")' Variant="Variant.Text">https://github.com/dotnet/runtime</MudButton>
        <MudButton Disabled="@LockUI" Color="Color.Info" Size="Size.Small" OnClick='() => OnExampleSubmit("https://github.com/Fody/NullGuard")' Variant="Variant.Text">https://github.com/Fody/NullGuard</MudButton>
        <MudButton Disabled="@LockUI" Color="Color.Info" Size="Size.Small" OnClick='() => OnExampleSubmit("https://github.com/dotnet/roslyn")' Variant="Variant.Text">https://github.com/dotnet/roslyn</MudButton>
        <MudButton Disabled="@LockUI" Color="Color.Info" Size="Size.Small" OnClick='() => OnExampleSubmit("https://github.com/shouldly/shouldly")' Variant="Variant.Text">https://github.com/shouldly/shouldly</MudButton>

    </MudContainer>
</MudPaper>

<MudTabs Class="@(LockUI ? "invisible" : "visible")" Elevation="5" Rounded="true" Centered="true" Color="@Color.Default" Style="position: relative;">

    <MudTabPanel Text="Overview">
        <MudContainer >
            @if (Analysis.OverView is not null)
            {
                <Overview Data="Analysis.OverView"></Overview>
            }
        </MudContainer>

    </MudTabPanel>
    <MudTabPanel Text="Documentation">
        <AnalysisResults Items="Analysis.Documentation"></AnalysisResults>
    </MudTabPanel>
    <MudTabPanel Text="Community">
        <AnalysisResults Items="Analysis.Community"></AnalysisResults>
    </MudTabPanel>
    <MudTabPanel Text="Quality">
        <AnalysisResults Items="Analysis.Quality"></AnalysisResults>
    </MudTabPanel>
    <MudTabPanel Text="Security">
        <MudText Align="Align.Center" Typo="Typo.h4">coming soon</MudText>
    </MudTabPanel>
    <MudTabPanel Text=@("Language Specific - " + Analysis.OverView?.PrimaryLanguage)>
        <AnalysisResults Items="Analysis.LanguageSpecific"></AnalysisResults>
    </MudTabPanel>

</MudTabs>

@code {

    public string RepositoryUrl { get; set; } = "";
    public RepoAnalysis Analysis { get; set; } = RepoAnalysis.Empty;
    public bool LockUI { get; set; }

    [Parameter]
    [SupplyParameterFromQuery(Name = "url")]
    public string? Url { get; set; }

    private async Task ShowInvalidInputMessage()
    {
        await DialogService.ShowMessageBox(
            "Not a valid repository url",
            "Needs to be in this form: https://github.com/owner/repo");

        StateHasChanged();
    }


    protected override async Task OnParametersSetAsync()
    {
        if (Url is not null)
        {
            RepositoryUrl = Url;
        }
        await base.OnParametersSetAsync();
    }

    private async Task ShowNotFoundMessage()
    {
        await DialogService.ShowMessageBox(
            "Repository not found",
            "Please check that repository actually exist");

        StateHasChanged();
    }

    private async Task ShowErrorMessage()
    {
        await DialogService.ShowMessageBox(
            "Something went wrong",
            "Please try again later, or try with another repository.");

        StateHasChanged();
    }

    private async Task OnExampleSubmit(
        string url)
    {
        RepositoryUrl = url;
        await OnSubmit();
    }

    private async Task OnSubmit()
    {
        RepositoryUrl = RepositoryUrl.Trim();
        RepositoryUrl = RepositoryUrl.TrimEnd('/');
        if (!Uri.TryCreate(RepositoryUrl, UriKind.Absolute, out var uri))
        {
            await ShowInvalidInputMessage();
            return;
        }

        if (!RepositoryUrl.StartsWith("https://github.com/"))
        {
            await ShowInvalidInputMessage();
            return;
        }

        var paths = uri.AbsolutePath.Split("/");
        if (paths.Length != 3)
        {
            await ShowInvalidInputMessage();
            return;
        }

        LockUI = true;

        var analysis = await AnalysisService.GetAnalysis(RepositoryUrl);
        switch (analysis.Status)
        {
            case RepoAnalysis.AnalysisStatus.NotFound:
                LockUI = false;
                StateHasChanged();
                await ShowNotFoundMessage();
                return;
            case RepoAnalysis.AnalysisStatus.Error:
                LockUI = false;
                StateHasChanged();
                await ShowErrorMessage();
                return;
        }
        Analysis = analysis;
        LockUI = false;

        await Task.CompletedTask;
    }

    private async Task OnSubmitDebug()
    {
        await AnalysisService.DoBulkTest(Topic);
    }

    public string Topic { get; set; } = "";

}