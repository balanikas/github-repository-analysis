@page "/"
@using RepositoryAnalysis
@using RepositoryAnalysis.Model
@inject IDialogService DialogService
@inject IAnalysisService AnalysisService
<PageTitle>Github Repository Analysis</PageTitle>

<MudPaper Height="250px" Width="100%" Class="mb-4 pb-4" Elevation="5">
    <MudContainer MaxWidth="MaxWidth.Medium">
        <MudItem Class="mt-2 pt-2">
            <EditForm Model="RepositoryUrl" OnSubmit="OnFormSubmit">
                <label for="repository">Repository:</label>
                <MudTextField id="repository" Disabled="@LockUI" InputType="InputType.Text"
                              Adornment="Adornment.End" AdornmentIcon="@Icons.Filled.Search"
                              AdornmentColor="Color.Primary"
                              OnAdornmentClick="OnSubmit"
                              On
                              InputMode="InputMode.url"
                              HelperText="Enter a github repository url and scan for any issues"
                              @bind-Value="RepositoryUrl" Label="https://github.com/owner/repo" Variant="Variant.Outlined">
                </MudTextField>
            </EditForm>

            @* <MudTextField Disabled="@LockUI" *@
            @*               InputType="InputType.Text" *@
            @*               Adornment="Adornment.End" *@
            @*               AdornmentIcon="@Icons.Filled.Sailing" *@
            @*               AdornmentColor="Color.Primary" *@
            @*               OnAdornmentClick="OnSubmitDebug" *@
            @*               InputMode="InputMode.url" *@
            @*               @bind-Value="Topic" *@
            @*               Variant="Variant.Outlined"> *@
            @* </MudTextField> *@
        </MudItem>
        <MudProgressLinear Class=@(LockUI ? "" : "invisible") Color="Color.Primary" Size="Size.Large" Indeterminate="true"/>
        <br/>
        <MudText Align="Align.Center">Try these examples: </MudText>
        <MudChip Disabled="@LockUI" Size="Size.Small" OnClick='() => OnExampleSubmit("https://github.com/dotnet/runtime")' Variant="Variant.Text">dotnet/runtime</MudChip>
        <MudChip Disabled="@LockUI" Size="Size.Small" OnClick='() => OnExampleSubmit("https://github.com/JSkimming/Castle.Core.AsyncInterceptor")' Variant="Variant.Text">JSkimming/Castle.Core.AsyncInterceptor</MudChip>
        <MudChip Disabled="@LockUI" Size="Size.Small" OnClick='() => OnExampleSubmit("https://github.com/dotnet/roslyn")' Variant="Variant.Text">dotnet/roslyn</MudChip>
        <MudChip Disabled="@LockUI" Size="Size.Small" OnClick='() => OnExampleSubmit("https://github.com/Fody/NullGuard")' Variant="Variant.Text">Fody/NullGuard</MudChip>
        <MudChip Disabled="@LockUI" Size="Size.Small" OnClick='() => OnExampleSubmit("https://github.com/Azure/azure-sdk-for-net")' Variant="Variant.Text">Azure/azure-sdk-for-net</MudChip>
        <MudChip Disabled="@LockUI" Size="Size.Small" OnClick='() => OnExampleSubmit("https://github.com/App-vNext/Polly")' Variant="Variant.Text">App-vNext/Polly</MudChip>
        <MudChip Disabled="@LockUI" Size="Size.Small" OnClick='() => OnExampleSubmit("https://github.com/hakimel/reveal.js")' Variant="Variant.Text">hakimel/reveal.js</MudChip>
        <MudChip Disabled="@LockUI" Size="Size.Small" OnClick='() => OnExampleSubmit("https://github.com/id-Software/DOOM")' Variant="Variant.Text">id-Software/DOOM</MudChip>
        <MudChip Disabled="@LockUI" Size="Size.Small" OnClick='() => OnExampleSubmit("https://github.com/id-Software/DOOM-3-BFG")' Variant="Variant.Text">id-Software/DOOM-3-BFG</MudChip>
        <MudChip Disabled="@LockUI" Size="Size.Small" OnClick='() => OnExampleSubmit("https://github.com/davidfowl/BedrockFramework")' Variant="Variant.Text">davidfowl/BedrockFramework</MudChip>
        <MudChip Disabled="@LockUI" Size="Size.Small" OnClick='() => OnExampleSubmit("https://github.com/balanikas/github-repository-analysis")' Variant="Variant.Text">balanikas/github-repository-analysis</MudChip>
    </MudContainer>
</MudPaper>

<MudContainer Class="@(LockUI ? "invisible" : "visible")">
    @if (Analysis.OverView is not null)
    {
        <Overview Data="Analysis.OverView"></Overview>
    }
    <br/>
    @if (_rules.Any())
    {
        <ResultsTable Rules="_rules"></ResultsTable>
    }
</MudContainer>

@code {

    private string RepositoryUrl { get; set; } = "";
    private RepoAnalysis Analysis { get; set; } = RepoAnalysis.Empty;
    private bool LockUI { get; set; }
    private IReadOnlyList<Rule> _rules = Array.Empty<Rule>();

    [Parameter]
    [SupplyParameterFromQuery(Name = "url")]
    public string? Url { get; set; }

    private async Task ShowInvalidInputMessage()
    {
        await DialogService.ShowMessageBox(
            "Not a valid repository url",
            "Needs to be in this form: https://github.com/owner/repo");
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Url is not null)
        {
            RepositoryUrl = Url;
        }
        await base.OnParametersSetAsync();
    }

    private async Task ShowNotFoundMessage()
    {
        await DialogService.ShowMessageBox(
            "Repository not found",
            "Please check that repository actually exist");
    }

    private async Task ShowErrorMessage()
    {
        await DialogService.ShowMessageBox(
            "Something went wrong",
            "Please try again later, or try with another repository.");
    }

    private async Task ShowIssues(
        IReadOnlyList<string> issues)
    {
        await DialogService.ShowMessageBox(
            "Potential issues found",
            string.Join(Environment.NewLine, issues));
    }

    private async Task OnExampleSubmit(
        string url)
    {
        RepositoryUrl = url;
        await OnSubmit();
    }

    private async Task OnFormSubmit(
        EditContext arg)
    {
        await OnSubmit();
    }

    private async Task OnSubmit()
    {
        RepositoryUrl = RepositoryUrl.Trim();
        RepositoryUrl = RepositoryUrl.TrimEnd('/');
        if (!Uri.TryCreate(RepositoryUrl, UriKind.Absolute, out var uri))
        {
            await ShowInvalidInputMessage();
            return;
        }

        if (!RepositoryUrl.StartsWith("https://github.com/"))
        {
            await ShowInvalidInputMessage();
            return;
        }

        var paths = uri.AbsolutePath.Split("/");
        if (paths.Length != 3)
        {
            await ShowInvalidInputMessage();
            return;
        }

        LockUI = true;

        var analysis = await AnalysisService.GetAnalysis(RepositoryUrl);
        switch (analysis.Status)
        {
            case RepoAnalysis.AnalysisStatus.NotFound:
                LockUI = false;
                StateHasChanged();
                await ShowNotFoundMessage();
                return;
            case RepoAnalysis.AnalysisStatus.Error:
                LockUI = false;
                StateHasChanged();
                await ShowErrorMessage();
                return;
        }

        if (analysis.Issues.Any())
        {
            await ShowIssues(analysis.Issues);
        }

        Analysis = analysis;
        _rules = Analysis.Rules.ToArray();
        LockUI = false;

        await Task.CompletedTask;
    }



}