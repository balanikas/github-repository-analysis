// <auto-generated/>
#nullable enable

namespace Microsoft.Extensions.DependencyInjection
{
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public static partial class GithubClientServiceCollectionExtensions
    {
        public static global::StrawberryShake.IClientBuilder<global::RepositoryAnalysis.Internal.GraphQL.State.GithubClientStoreAccessor> AddGithubClient(this global::Microsoft.Extensions.DependencyInjection.IServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            var serviceCollection = new global::Microsoft.Extensions.DependencyInjection.ServiceCollection();
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp =>
            {
                ConfigureClientDefault(sp, serviceCollection, strategy);
                return new ClientServiceProvider(global::Microsoft.Extensions.DependencyInjection.ServiceCollectionContainerBuilderExtensions.BuildServiceProvider(serviceCollection));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => new global::RepositoryAnalysis.Internal.GraphQL.State.GithubClientStoreAccessor(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityIdSerializer>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory>>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::RepositoryAnalysis.Internal.GraphQL.GetAgeQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::RepositoryAnalysis.Internal.GraphQL.GetRepoQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::RepositoryAnalysis.Internal.GraphQL.GetFileQuery>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::RepositoryAnalysis.Internal.GraphQL.GithubClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::RepositoryAnalysis.Internal.GraphQL.IGithubClient>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<ClientServiceProvider>(sp)));
            return new global::StrawberryShake.ClientBuilder<global::RepositoryAnalysis.Internal.GraphQL.State.GithubClientStoreAccessor>("GithubClient", services, serviceCollection);
        }

        private static global::Microsoft.Extensions.DependencyInjection.IServiceCollection ConfigureClientDefault(global::System.IServiceProvider parentServices, global::Microsoft.Extensions.DependencyInjection.ServiceCollection services, global::StrawberryShake.ExecutionStrategy strategy = global::StrawberryShake.ExecutionStrategy.NetworkOnly)
        {
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IEntityStore, global::StrawberryShake.EntityStore>(services);
            global::Microsoft.Extensions.DependencyInjection.Extensions.ServiceCollectionDescriptorExtensions.TryAddSingleton<global::StrawberryShake.IOperationStore>(services, sp => new global::StrawberryShake.OperationStore(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IEntityStore>(sp)));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Transport.Http.IHttpConnection>(services, sp =>
            {
                var clientFactory = global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Net.Http.IHttpClientFactory>(parentServices);
                return new global::StrawberryShake.Transport.Http.HttpConnection(() => clientFactory.CreateClient("GithubClient"));
            });
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.RepositoryEntity, global::RepositoryAnalysis.Internal.GraphQL.GetAge_Repository_Repository>, global::RepositoryAnalysis.Internal.GraphQL.State.GetAge_Repository_RepositoryFromRepositoryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.RepositoryEntity, global::RepositoryAnalysis.Internal.GraphQL.GetRepo_Repository_Repository>, global::RepositoryAnalysis.Internal.GraphQL.State.GetRepo_Repository_RepositoryFromRepositoryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.CodeOfConductEntity, global::RepositoryAnalysis.Internal.GraphQL.GetRepo_Repository_CodeOfConduct_CodeOfConduct>, global::RepositoryAnalysis.Internal.GraphQL.State.GetRepo_Repository_CodeOfConduct_CodeOfConductFromCodeOfConductEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.RefEntity, global::RepositoryAnalysis.Internal.GraphQL.GetRepo_Repository_DefaultBranchRef_Ref>, global::RepositoryAnalysis.Internal.GraphQL.State.GetRepo_Repository_DefaultBranchRef_RefFromRefEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.LicenseEntity, global::RepositoryAnalysis.Internal.GraphQL.GetRepo_Repository_LicenseInfo_License>, global::RepositoryAnalysis.Internal.GraphQL.State.GetRepo_Repository_LicenseInfo_LicenseFromLicenseEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.LanguageEntity, global::RepositoryAnalysis.Internal.GraphQL.GetRepo_Repository_PrimaryLanguage_Language>, global::RepositoryAnalysis.Internal.GraphQL.State.GetRepo_Repository_PrimaryLanguage_LanguageFromLanguageEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.BlobEntity, global::RepositoryAnalysis.Internal.GraphQL.GetRepo_Repository_DefaultBranchRef_Target_Blob>, global::RepositoryAnalysis.Internal.GraphQL.State.GetRepo_Repository_DefaultBranchRef_Target_BlobFromBlobEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.CommitEntity, global::RepositoryAnalysis.Internal.GraphQL.GetRepo_Repository_DefaultBranchRef_Target_Commit>, global::RepositoryAnalysis.Internal.GraphQL.State.GetRepo_Repository_DefaultBranchRef_Target_CommitFromCommitEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.TagEntity, global::RepositoryAnalysis.Internal.GraphQL.GetRepo_Repository_DefaultBranchRef_Target_Tag>, global::RepositoryAnalysis.Internal.GraphQL.State.GetRepo_Repository_DefaultBranchRef_Target_TagFromTagEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.TreeEntity, global::RepositoryAnalysis.Internal.GraphQL.GetRepo_Repository_DefaultBranchRef_Target_Tree>, global::RepositoryAnalysis.Internal.GraphQL.State.GetRepo_Repository_DefaultBranchRef_Target_TreeFromTreeEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.BranchProtectionRuleEntity, global::RepositoryAnalysis.Internal.GraphQL.GetRepo_Repository_DefaultBranchRef_BranchProtectionRule_BranchProtectionRule>, global::RepositoryAnalysis.Internal.GraphQL.State.GetRepo_Repository_DefaultBranchRef_BranchProtectionRule_BranchProtectionRuleFromBranchProtectionRuleEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.PullRequestEntity, global::RepositoryAnalysis.Internal.GraphQL.GetRepo_Repository_PullRequests_Nodes_PullRequest>, global::RepositoryAnalysis.Internal.GraphQL.State.GetRepo_Repository_PullRequests_Nodes_PullRequestFromPullRequestEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.DiscussionEntity, global::RepositoryAnalysis.Internal.GraphQL.GetRepo_Repository_Discussions_Edges_Node_Discussion>, global::RepositoryAnalysis.Internal.GraphQL.State.GetRepo_Repository_Discussions_Edges_Node_DiscussionFromDiscussionEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.ReleaseEntity, global::RepositoryAnalysis.Internal.GraphQL.GetRepo_Repository_Releases_Edges_Node_Release>, global::RepositoryAnalysis.Internal.GraphQL.State.GetRepo_Repository_Releases_Edges_Node_ReleaseFromReleaseEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.IssueEntity, global::RepositoryAnalysis.Internal.GraphQL.GetRepo_Repository_Issues_Edges_Node_Issue>, global::RepositoryAnalysis.Internal.GraphQL.State.GetRepo_Repository_Issues_Edges_Node_IssueFromIssueEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.DiscussionCommentEntity, global::RepositoryAnalysis.Internal.GraphQL.GetRepo_Repository_Discussions_Edges_Node_Answer_DiscussionComment>, global::RepositoryAnalysis.Internal.GraphQL.State.GetRepo_Repository_Discussions_Edges_Node_Answer_DiscussionCommentFromDiscussionCommentEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.RepositoryEntity, global::RepositoryAnalysis.Internal.GraphQL.GetFile_Repository_Repository>, global::RepositoryAnalysis.Internal.GraphQL.State.GetFile_Repository_RepositoryFromRepositoryEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.BlobEntity, global::RepositoryAnalysis.Internal.GraphQL.GetFile_Repository_File_Blob>, global::RepositoryAnalysis.Internal.GraphQL.State.GetFile_Repository_File_BlobFromBlobEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.CommitEntity, global::RepositoryAnalysis.Internal.GraphQL.GetFile_Repository_File_Commit>, global::RepositoryAnalysis.Internal.GraphQL.State.GetFile_Repository_File_CommitFromCommitEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.TagEntity, global::RepositoryAnalysis.Internal.GraphQL.GetFile_Repository_File_Tag>, global::RepositoryAnalysis.Internal.GraphQL.State.GetFile_Repository_File_TagFromTagEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.TreeEntity, global::RepositoryAnalysis.Internal.GraphQL.GetFile_Repository_File_Tree>, global::RepositoryAnalysis.Internal.GraphQL.State.GetFile_Repository_File_TreeFromTreeEntityMapper>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.StringSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.BooleanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ShortSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IntSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.LongSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.FloatSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DecimalSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UrlSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.UUIDSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.IdSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateTimeSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.DateSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.ByteArraySerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.TimeSpanSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer, global::StrawberryShake.Serialization.JsonSerializer>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializer>(services, new global::StrawberryShake.Serialization.UrlSerializer("URI"));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.Serialization.ISerializerResolver>(services, sp => new global::StrawberryShake.Serialization.SerializerResolver(global::System.Linq.Enumerable.Concat(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(parentServices), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::System.Collections.Generic.IEnumerable<global::StrawberryShake.Serialization.ISerializer>>(sp))));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::RepositoryAnalysis.Internal.GraphQL.IGetAgeResult>, global::RepositoryAnalysis.Internal.GraphQL.State.GetAgeResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::RepositoryAnalysis.Internal.GraphQL.IGetAgeResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::RepositoryAnalysis.Internal.GraphQL.IGetAgeQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::RepositoryAnalysis.Internal.GraphQL.IGetAgeResult>, global::RepositoryAnalysis.Internal.GraphQL.State.GetAgeBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::RepositoryAnalysis.Internal.GraphQL.IGetAgeResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::RepositoryAnalysis.Internal.GraphQL.IGetAgeResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::RepositoryAnalysis.Internal.GraphQL.IGetAgeResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::RepositoryAnalysis.Internal.GraphQL.GetAgeQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::RepositoryAnalysis.Internal.GraphQL.IGetAgeQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::RepositoryAnalysis.Internal.GraphQL.GetAgeQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::RepositoryAnalysis.Internal.GraphQL.IGetRepoResult>, global::RepositoryAnalysis.Internal.GraphQL.State.GetRepoResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::RepositoryAnalysis.Internal.GraphQL.IGetRepoResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::RepositoryAnalysis.Internal.GraphQL.IGetRepoQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::RepositoryAnalysis.Internal.GraphQL.IGetRepoResult>, global::RepositoryAnalysis.Internal.GraphQL.State.GetRepoBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::RepositoryAnalysis.Internal.GraphQL.IGetRepoResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::RepositoryAnalysis.Internal.GraphQL.IGetRepoResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::RepositoryAnalysis.Internal.GraphQL.IGetRepoResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::RepositoryAnalysis.Internal.GraphQL.GetRepoQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::RepositoryAnalysis.Internal.GraphQL.IGetRepoQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::RepositoryAnalysis.Internal.GraphQL.GetRepoQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory<global::RepositoryAnalysis.Internal.GraphQL.IGetFileResult>, global::RepositoryAnalysis.Internal.GraphQL.State.GetFileResultFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultDataFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultDataFactory<global::RepositoryAnalysis.Internal.GraphQL.IGetFileResult>>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationRequestFactory>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::RepositoryAnalysis.Internal.GraphQL.IGetFileQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::RepositoryAnalysis.Internal.GraphQL.IGetFileResult>, global::RepositoryAnalysis.Internal.GraphQL.State.GetFileBuilder>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IOperationExecutor<global::RepositoryAnalysis.Internal.GraphQL.IGetFileResult>>(services, sp => new global::StrawberryShake.OperationExecutor<global::System.Text.Json.JsonDocument, global::RepositoryAnalysis.Internal.GraphQL.IGetFileResult>(global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.Transport.Http.IHttpConnection>(sp), () => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::RepositoryAnalysis.Internal.GraphQL.IGetFileResult>>(sp), global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::StrawberryShake.IOperationStore>(sp), strategy));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::RepositoryAnalysis.Internal.GraphQL.GetFileQuery>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::RepositoryAnalysis.Internal.GraphQL.IGetFileQuery>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::RepositoryAnalysis.Internal.GraphQL.GetFileQuery>(sp));
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::StrawberryShake.IEntityIdSerializer, global::RepositoryAnalysis.Internal.GraphQL.State.GithubClientEntityIdFactory>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::RepositoryAnalysis.Internal.GraphQL.GithubClient>(services);
            global::Microsoft.Extensions.DependencyInjection.ServiceCollectionServiceExtensions.AddSingleton<global::RepositoryAnalysis.Internal.GraphQL.IGithubClient>(services, sp => global::Microsoft.Extensions.DependencyInjection.ServiceProviderServiceExtensions.GetRequiredService<global::RepositoryAnalysis.Internal.GraphQL.GithubClient>(sp));
            return services;
        }

        private class ClientServiceProvider : System.IServiceProvider, System.IDisposable
        {
            private readonly System.IServiceProvider _provider;
            public ClientServiceProvider(System.IServiceProvider provider)
            {
                _provider = provider;
            }

            public object? GetService(System.Type serviceType)
            {
                return _provider.GetService(serviceType);
            }

            public void Dispose()
            {
                if (_provider is System.IDisposable d)
                {
                    d.Dispose();
                }
            }
        }
    }
}

namespace RepositoryAnalysis.Internal.GraphQL
{
    /// <summary>
    /// The query root of GitHub's GraphQL interface.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetAgeResult : global::System.IEquatable<GetAgeResult>, IGetAgeResult
    {
        public GetAgeResult(global::RepositoryAnalysis.Internal.GraphQL.IGetAge_Repository? repository)
        {
            Repository = repository;
        }

        /// <summary>
        /// Lookup a given repository by the owner and repository name.
        /// </summary>
        public global::RepositoryAnalysis.Internal.GraphQL.IGetAge_Repository? Repository { get; }

        public virtual global::System.Boolean Equals(GetAgeResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Repository is null && other.Repository is null) || Repository != null && Repository.Equals(other.Repository)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetAgeResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Repository != null)
                {
                    hash ^= 397 * Repository.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A repository contains the content for a project.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetAge_Repository_Repository : global::System.IEquatable<GetAge_Repository_Repository>, IGetAge_Repository_Repository
    {
        public GetAge_Repository_Repository(global::System.DateTimeOffset updatedAt, global::System.DateTimeOffset? pushedAt)
        {
            UpdatedAt = updatedAt;
            PushedAt = pushedAt;
        }

        /// <summary>
        /// Identifies the date and time when the object was last updated.
        /// </summary>
        public global::System.DateTimeOffset UpdatedAt { get; }

        /// <summary>
        /// Identifies when the repository was last pushed to.
        /// </summary>
        public global::System.DateTimeOffset? PushedAt { get; }

        public virtual global::System.Boolean Equals(GetAge_Repository_Repository? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (UpdatedAt.Equals(other.UpdatedAt)) && ((PushedAt is null && other.PushedAt is null) || PushedAt != null && PushedAt.Equals(other.PushedAt));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetAge_Repository_Repository)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * UpdatedAt.GetHashCode();
                if (PushedAt != null)
                {
                    hash ^= 397 * PushedAt.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// The query root of GitHub's GraphQL interface.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetAgeResult
    {
        /// <summary>
        /// Lookup a given repository by the owner and repository name.
        /// </summary>
        public global::RepositoryAnalysis.Internal.GraphQL.IGetAge_Repository? Repository { get; }
    }

    /// <summary>
    /// A repository contains the content for a project.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetAge_Repository
    {
        /// <summary>
        /// Identifies the date and time when the object was last updated.
        /// </summary>
        public global::System.DateTimeOffset UpdatedAt { get; }

        /// <summary>
        /// Identifies when the repository was last pushed to.
        /// </summary>
        public global::System.DateTimeOffset? PushedAt { get; }
    }

    /// <summary>
    /// A repository contains the content for a project.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetAge_Repository_Repository : IGetAge_Repository
    {
    }

    /// <summary>
    /// The query root of GitHub's GraphQL interface.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetRepoResult : global::System.IEquatable<GetRepoResult>, IGetRepoResult
    {
        public GetRepoResult(global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository? repository)
        {
            Repository = repository;
        }

        /// <summary>
        /// Lookup a given repository by the owner and repository name.
        /// </summary>
        public global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository? Repository { get; }

        public virtual global::System.Boolean Equals(GetRepoResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Repository is null && other.Repository is null) || Repository != null && Repository.Equals(other.Repository)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetRepoResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Repository != null)
                {
                    hash ^= 397 * Repository.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A repository contains the content for a project.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetRepo_Repository_Repository : global::System.IEquatable<GetRepo_Repository_Repository>, IGetRepo_Repository_Repository
    {
        public GetRepo_Repository_Repository(global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_Discussions discussions, global::System.Boolean? isSecurityPolicyEnabled, global::System.Uri? securityPolicyUrl, global::System.Boolean hasVulnerabilityAlertsEnabled, global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_VulnerabilityAlerts? vulnerabilityAlerts, global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_Releases releases, global::System.Int32? diskUsage, global::System.DateTimeOffset updatedAt, global::System.DateTimeOffset? pushedAt, global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_RepositoryTopics repositoryTopics, global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_CodeOfConduct? codeOfConduct, global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_Codeowners? codeowners, global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_DefaultBranchRef? defaultBranchRef, global::System.String? description, global::System.Boolean hasDiscussionsEnabled, global::System.Boolean hasIssuesEnabled, global::System.Boolean isArchived, global::System.Boolean isEmpty, global::System.Boolean isLocked, global::System.Collections.Generic.IReadOnlyList<global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_IssueTemplates>? issueTemplates, global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_LicenseInfo? licenseInfo, global::System.Uri openGraphImageUrl, global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_PrimaryLanguage? primaryLanguage, global::System.Collections.Generic.IReadOnlyList<global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_PullRequestTemplates>? pullRequestTemplates, global::System.Uri url, global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_PullRequests pullRequests, global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_Issues issues)
        {
            Discussions = discussions;
            IsSecurityPolicyEnabled = isSecurityPolicyEnabled;
            SecurityPolicyUrl = securityPolicyUrl;
            HasVulnerabilityAlertsEnabled = hasVulnerabilityAlertsEnabled;
            VulnerabilityAlerts = vulnerabilityAlerts;
            Releases = releases;
            DiskUsage = diskUsage;
            UpdatedAt = updatedAt;
            PushedAt = pushedAt;
            RepositoryTopics = repositoryTopics;
            CodeOfConduct = codeOfConduct;
            Codeowners = codeowners;
            DefaultBranchRef = defaultBranchRef;
            Description = description;
            HasDiscussionsEnabled = hasDiscussionsEnabled;
            HasIssuesEnabled = hasIssuesEnabled;
            IsArchived = isArchived;
            IsEmpty = isEmpty;
            IsLocked = isLocked;
            IssueTemplates = issueTemplates;
            LicenseInfo = licenseInfo;
            OpenGraphImageUrl = openGraphImageUrl;
            PrimaryLanguage = primaryLanguage;
            PullRequestTemplates = pullRequestTemplates;
            Url = url;
            PullRequests = pullRequests;
            Issues = issues;
        }

        /// <summary>
        /// A list of discussions that have been opened in the repository.
        /// </summary>
        public global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_Discussions Discussions { get; }

        /// <summary>
        /// Returns true if this repository has a security policy
        /// </summary>
        public global::System.Boolean? IsSecurityPolicyEnabled { get; }

        /// <summary>
        /// The security policy URL.
        /// </summary>
        public global::System.Uri? SecurityPolicyUrl { get; }

        /// <summary>
        /// Whether vulnerability alerts are enabled for the repository.
        /// </summary>
        public global::System.Boolean HasVulnerabilityAlertsEnabled { get; }

        /// <summary>
        /// A list of vulnerability alerts that are on this repository.
        /// </summary>
        public global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_VulnerabilityAlerts? VulnerabilityAlerts { get; }

        /// <summary>
        /// List of releases which are dependent on this repository.
        /// </summary>
        public global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_Releases Releases { get; }

        /// <summary>
        /// The number of kilobytes this repository occupies on disk.
        /// </summary>
        public global::System.Int32? DiskUsage { get; }

        /// <summary>
        /// Identifies the date and time when the object was last updated.
        /// </summary>
        public global::System.DateTimeOffset UpdatedAt { get; }

        /// <summary>
        /// Identifies when the repository was last pushed to.
        /// </summary>
        public global::System.DateTimeOffset? PushedAt { get; }

        /// <summary>
        /// A list of applied repository-topic associations for this repository.
        /// </summary>
        public global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_RepositoryTopics RepositoryTopics { get; }

        /// <summary>
        /// Returns the code of conduct for this repository
        /// </summary>
        public global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_CodeOfConduct? CodeOfConduct { get; }

        /// <summary>
        /// Information extracted from the repository's `CODEOWNERS` file.
        /// </summary>
        public global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_Codeowners? Codeowners { get; }

        /// <summary>
        /// The Ref associated with the repository's default branch.
        /// </summary>
        public global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_DefaultBranchRef? DefaultBranchRef { get; }

        /// <summary>
        /// The description of the repository.
        /// </summary>
        public global::System.String? Description { get; }

        /// <summary>
        /// Indicates if the repository has the Discussions feature enabled.
        /// </summary>
        public global::System.Boolean HasDiscussionsEnabled { get; }

        /// <summary>
        /// Indicates if the repository has issues feature enabled.
        /// </summary>
        public global::System.Boolean HasIssuesEnabled { get; }

        /// <summary>
        /// Indicates if the repository is unmaintained.
        /// </summary>
        public global::System.Boolean IsArchived { get; }

        /// <summary>
        /// Returns whether or not this repository is empty.
        /// </summary>
        public global::System.Boolean IsEmpty { get; }

        /// <summary>
        /// Indicates if the repository has been locked or not.
        /// </summary>
        public global::System.Boolean IsLocked { get; }

        /// <summary>
        /// Returns a list of issue templates associated to the repository
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_IssueTemplates>? IssueTemplates { get; }

        /// <summary>
        /// The license associated with the repository
        /// </summary>
        public global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_LicenseInfo? LicenseInfo { get; }

        /// <summary>
        /// The image used to represent this repository in Open Graph data.
        /// </summary>
        public global::System.Uri OpenGraphImageUrl { get; }

        /// <summary>
        /// The primary language of the repository's code.
        /// </summary>
        public global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_PrimaryLanguage? PrimaryLanguage { get; }

        /// <summary>
        /// Returns a list of pull request templates associated to the repository
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_PullRequestTemplates>? PullRequestTemplates { get; }

        /// <summary>
        /// The HTTP URL for this repository
        /// </summary>
        public global::System.Uri Url { get; }

        /// <summary>
        /// A list of pull requests that have been opened in the repository.
        /// </summary>
        public global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_PullRequests PullRequests { get; }

        /// <summary>
        /// A list of issues that have been opened in the repository.
        /// </summary>
        public global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_Issues Issues { get; }

        public virtual global::System.Boolean Equals(GetRepo_Repository_Repository? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Discussions.Equals(other.Discussions)) && IsSecurityPolicyEnabled == other.IsSecurityPolicyEnabled && ((SecurityPolicyUrl is null && other.SecurityPolicyUrl is null) || SecurityPolicyUrl != null && SecurityPolicyUrl.Equals(other.SecurityPolicyUrl)) && HasVulnerabilityAlertsEnabled == other.HasVulnerabilityAlertsEnabled && ((VulnerabilityAlerts is null && other.VulnerabilityAlerts is null) || VulnerabilityAlerts != null && VulnerabilityAlerts.Equals(other.VulnerabilityAlerts)) && Releases.Equals(other.Releases) && DiskUsage == other.DiskUsage && UpdatedAt.Equals(other.UpdatedAt) && ((PushedAt is null && other.PushedAt is null) || PushedAt != null && PushedAt.Equals(other.PushedAt)) && RepositoryTopics.Equals(other.RepositoryTopics) && ((CodeOfConduct is null && other.CodeOfConduct is null) || CodeOfConduct != null && CodeOfConduct.Equals(other.CodeOfConduct)) && ((Codeowners is null && other.Codeowners is null) || Codeowners != null && Codeowners.Equals(other.Codeowners)) && ((DefaultBranchRef is null && other.DefaultBranchRef is null) || DefaultBranchRef != null && DefaultBranchRef.Equals(other.DefaultBranchRef)) && ((Description is null && other.Description is null) || Description != null && Description.Equals(other.Description)) && HasDiscussionsEnabled == other.HasDiscussionsEnabled && HasIssuesEnabled == other.HasIssuesEnabled && IsArchived == other.IsArchived && IsEmpty == other.IsEmpty && IsLocked == other.IsLocked && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(IssueTemplates, other.IssueTemplates) && ((LicenseInfo is null && other.LicenseInfo is null) || LicenseInfo != null && LicenseInfo.Equals(other.LicenseInfo)) && OpenGraphImageUrl.Equals(other.OpenGraphImageUrl) && ((PrimaryLanguage is null && other.PrimaryLanguage is null) || PrimaryLanguage != null && PrimaryLanguage.Equals(other.PrimaryLanguage)) && global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(PullRequestTemplates, other.PullRequestTemplates) && Url.Equals(other.Url) && PullRequests.Equals(other.PullRequests) && Issues.Equals(other.Issues);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetRepo_Repository_Repository)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Discussions.GetHashCode();
                if (IsSecurityPolicyEnabled != null)
                {
                    hash ^= 397 * IsSecurityPolicyEnabled.GetHashCode();
                }

                if (SecurityPolicyUrl != null)
                {
                    hash ^= 397 * SecurityPolicyUrl.GetHashCode();
                }

                hash ^= 397 * HasVulnerabilityAlertsEnabled.GetHashCode();
                if (VulnerabilityAlerts != null)
                {
                    hash ^= 397 * VulnerabilityAlerts.GetHashCode();
                }

                hash ^= 397 * Releases.GetHashCode();
                if (DiskUsage != null)
                {
                    hash ^= 397 * DiskUsage.GetHashCode();
                }

                hash ^= 397 * UpdatedAt.GetHashCode();
                if (PushedAt != null)
                {
                    hash ^= 397 * PushedAt.GetHashCode();
                }

                hash ^= 397 * RepositoryTopics.GetHashCode();
                if (CodeOfConduct != null)
                {
                    hash ^= 397 * CodeOfConduct.GetHashCode();
                }

                if (Codeowners != null)
                {
                    hash ^= 397 * Codeowners.GetHashCode();
                }

                if (DefaultBranchRef != null)
                {
                    hash ^= 397 * DefaultBranchRef.GetHashCode();
                }

                if (Description != null)
                {
                    hash ^= 397 * Description.GetHashCode();
                }

                hash ^= 397 * HasDiscussionsEnabled.GetHashCode();
                hash ^= 397 * HasIssuesEnabled.GetHashCode();
                hash ^= 397 * IsArchived.GetHashCode();
                hash ^= 397 * IsEmpty.GetHashCode();
                hash ^= 397 * IsLocked.GetHashCode();
                if (IssueTemplates != null)
                {
                    foreach (var IssueTemplates_elm in IssueTemplates)
                    {
                        hash ^= 397 * IssueTemplates_elm.GetHashCode();
                    }
                }

                if (LicenseInfo != null)
                {
                    hash ^= 397 * LicenseInfo.GetHashCode();
                }

                hash ^= 397 * OpenGraphImageUrl.GetHashCode();
                if (PrimaryLanguage != null)
                {
                    hash ^= 397 * PrimaryLanguage.GetHashCode();
                }

                if (PullRequestTemplates != null)
                {
                    foreach (var PullRequestTemplates_elm in PullRequestTemplates)
                    {
                        hash ^= 397 * PullRequestTemplates_elm.GetHashCode();
                    }
                }

                hash ^= 397 * Url.GetHashCode();
                hash ^= 397 * PullRequests.GetHashCode();
                hash ^= 397 * Issues.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// The connection type for Discussion.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetRepo_Repository_Discussions_DiscussionConnection : global::System.IEquatable<GetRepo_Repository_Discussions_DiscussionConnection>, IGetRepo_Repository_Discussions_DiscussionConnection
    {
        public GetRepo_Repository_Discussions_DiscussionConnection(global::System.Collections.Generic.IReadOnlyList<global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_Discussions_Edges?>? edges, global::System.Int32 totalCount)
        {
            Edges = edges;
            TotalCount = totalCount;
        }

        /// <summary>
        /// A list of edges.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_Discussions_Edges?>? Edges { get; }

        /// <summary>
        /// Identifies the total count of items in the connection.
        /// </summary>
        public global::System.Int32 TotalCount { get; }

        public virtual global::System.Boolean Equals(GetRepo_Repository_Discussions_DiscussionConnection? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Edges, other.Edges)) && TotalCount == other.TotalCount;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetRepo_Repository_Discussions_DiscussionConnection)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Edges != null)
                {
                    foreach (var Edges_elm in Edges)
                    {
                        if (Edges_elm != null)
                        {
                            hash ^= 397 * Edges_elm.GetHashCode();
                        }
                    }
                }

                hash ^= 397 * TotalCount.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// The connection type for RepositoryVulnerabilityAlert.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetRepo_Repository_VulnerabilityAlerts_RepositoryVulnerabilityAlertConnection : global::System.IEquatable<GetRepo_Repository_VulnerabilityAlerts_RepositoryVulnerabilityAlertConnection>, IGetRepo_Repository_VulnerabilityAlerts_RepositoryVulnerabilityAlertConnection
    {
        public GetRepo_Repository_VulnerabilityAlerts_RepositoryVulnerabilityAlertConnection(global::System.Int32 totalCount)
        {
            TotalCount = totalCount;
        }

        /// <summary>
        /// Identifies the total count of items in the connection.
        /// </summary>
        public global::System.Int32 TotalCount { get; }

        public virtual global::System.Boolean Equals(GetRepo_Repository_VulnerabilityAlerts_RepositoryVulnerabilityAlertConnection? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (TotalCount == other.TotalCount);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetRepo_Repository_VulnerabilityAlerts_RepositoryVulnerabilityAlertConnection)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * TotalCount.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// The connection type for Release.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetRepo_Repository_Releases_ReleaseConnection : global::System.IEquatable<GetRepo_Repository_Releases_ReleaseConnection>, IGetRepo_Repository_Releases_ReleaseConnection
    {
        public GetRepo_Repository_Releases_ReleaseConnection(global::System.Collections.Generic.IReadOnlyList<global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_Releases_Edges?>? edges)
        {
            Edges = edges;
        }

        /// <summary>
        /// A list of edges.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_Releases_Edges?>? Edges { get; }

        public virtual global::System.Boolean Equals(GetRepo_Repository_Releases_ReleaseConnection? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Edges, other.Edges));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetRepo_Repository_Releases_ReleaseConnection)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Edges != null)
                {
                    foreach (var Edges_elm in Edges)
                    {
                        if (Edges_elm != null)
                        {
                            hash ^= 397 * Edges_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// The connection type for RepositoryTopic.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetRepo_Repository_RepositoryTopics_RepositoryTopicConnection : global::System.IEquatable<GetRepo_Repository_RepositoryTopics_RepositoryTopicConnection>, IGetRepo_Repository_RepositoryTopics_RepositoryTopicConnection
    {
        public GetRepo_Repository_RepositoryTopics_RepositoryTopicConnection(global::System.Int32 totalCount)
        {
            TotalCount = totalCount;
        }

        /// <summary>
        /// Identifies the total count of items in the connection.
        /// </summary>
        public global::System.Int32 TotalCount { get; }

        public virtual global::System.Boolean Equals(GetRepo_Repository_RepositoryTopics_RepositoryTopicConnection? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (TotalCount == other.TotalCount);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetRepo_Repository_RepositoryTopics_RepositoryTopicConnection)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * TotalCount.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// The Code of Conduct for a repository
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetRepo_Repository_CodeOfConduct_CodeOfConduct : global::System.IEquatable<GetRepo_Repository_CodeOfConduct_CodeOfConduct>, IGetRepo_Repository_CodeOfConduct_CodeOfConduct
    {
        public GetRepo_Repository_CodeOfConduct_CodeOfConduct(global::System.Uri? url, global::System.String name)
        {
            Url = url;
            Name = name;
        }

        /// <summary>
        /// The HTTP URL for this Code of Conduct
        /// </summary>
        public global::System.Uri? Url { get; }

        /// <summary>
        /// The formal name of the Code of Conduct
        /// </summary>
        public global::System.String Name { get; }

        public virtual global::System.Boolean Equals(GetRepo_Repository_CodeOfConduct_CodeOfConduct? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Url is null && other.Url is null) || Url != null && Url.Equals(other.Url))) && Name.Equals(other.Name);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetRepo_Repository_CodeOfConduct_CodeOfConduct)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Url != null)
                {
                    hash ^= 397 * Url.GetHashCode();
                }

                hash ^= 397 * Name.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// Information extracted from a repository's `CODEOWNERS` file.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetRepo_Repository_Codeowners_RepositoryCodeowners : global::System.IEquatable<GetRepo_Repository_Codeowners_RepositoryCodeowners>, IGetRepo_Repository_Codeowners_RepositoryCodeowners
    {
        public GetRepo_Repository_Codeowners_RepositoryCodeowners(global::System.Collections.Generic.IReadOnlyList<global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_Codeowners_Errors> errors)
        {
            Errors = errors;
        }

        /// <summary>
        /// Any problems that were encountered while parsing the `CODEOWNERS` file.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_Codeowners_Errors> Errors { get; }

        public virtual global::System.Boolean Equals(GetRepo_Repository_Codeowners_RepositoryCodeowners? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Errors, other.Errors));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetRepo_Repository_Codeowners_RepositoryCodeowners)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                foreach (var Errors_elm in Errors)
                {
                    hash ^= 397 * Errors_elm.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a Git reference.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetRepo_Repository_DefaultBranchRef_Ref : global::System.IEquatable<GetRepo_Repository_DefaultBranchRef_Ref>, IGetRepo_Repository_DefaultBranchRef_Ref
    {
        public GetRepo_Repository_DefaultBranchRef_Ref(global::System.String name, global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_DefaultBranchRef_Target? target, global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_DefaultBranchRef_BranchProtectionRule? branchProtectionRule)
        {
            Name = name;
            Target = target;
            BranchProtectionRule = branchProtectionRule;
        }

        /// <summary>
        /// The ref name.
        /// </summary>
        public global::System.String Name { get; }

        /// <summary>
        /// The object the ref points to. Returns null when object does not exist.
        /// </summary>
        public global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_DefaultBranchRef_Target? Target { get; }

        /// <summary>
        /// Branch protection rules for this ref
        /// </summary>
        public global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_DefaultBranchRef_BranchProtectionRule? BranchProtectionRule { get; }

        public virtual global::System.Boolean Equals(GetRepo_Repository_DefaultBranchRef_Ref? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Name.Equals(other.Name)) && ((Target is null && other.Target is null) || Target != null && Target.Equals(other.Target)) && ((BranchProtectionRule is null && other.BranchProtectionRule is null) || BranchProtectionRule != null && BranchProtectionRule.Equals(other.BranchProtectionRule));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetRepo_Repository_DefaultBranchRef_Ref)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Name.GetHashCode();
                if (Target != null)
                {
                    hash ^= 397 * Target.GetHashCode();
                }

                if (BranchProtectionRule != null)
                {
                    hash ^= 397 * BranchProtectionRule.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A repository issue template.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetRepo_Repository_IssueTemplates_IssueTemplate : global::System.IEquatable<GetRepo_Repository_IssueTemplates_IssueTemplate>, IGetRepo_Repository_IssueTemplates_IssueTemplate
    {
        public GetRepo_Repository_IssueTemplates_IssueTemplate(global::System.String name, global::System.String filename)
        {
            Name = name;
            Filename = filename;
        }

        /// <summary>
        /// The template name.
        /// </summary>
        public global::System.String Name { get; }

        /// <summary>
        /// The template filename.
        /// </summary>
        public global::System.String Filename { get; }

        public virtual global::System.Boolean Equals(GetRepo_Repository_IssueTemplates_IssueTemplate? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Name.Equals(other.Name)) && Filename.Equals(other.Filename);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetRepo_Repository_IssueTemplates_IssueTemplate)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Name.GetHashCode();
                hash ^= 397 * Filename.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// A repository's open source license
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetRepo_Repository_LicenseInfo_License : global::System.IEquatable<GetRepo_Repository_LicenseInfo_License>, IGetRepo_Repository_LicenseInfo_License
    {
        public GetRepo_Repository_LicenseInfo_License(global::System.String name, global::System.Uri? url)
        {
            Name = name;
            Url = url;
        }

        /// <summary>
        /// The license full name specified by <https: / / spdx.org / licenses>
        /// </summary>
        public global::System.String Name { get; }

        /// <summary>
        /// URL to the license on <https: / / choosealicense.com>
        /// </summary>
        public global::System.Uri? Url { get; }

        public virtual global::System.Boolean Equals(GetRepo_Repository_LicenseInfo_License? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Name.Equals(other.Name)) && ((Url is null && other.Url is null) || Url != null && Url.Equals(other.Url));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetRepo_Repository_LicenseInfo_License)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Name.GetHashCode();
                if (Url != null)
                {
                    hash ^= 397 * Url.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a given language found in repositories.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetRepo_Repository_PrimaryLanguage_Language : global::System.IEquatable<GetRepo_Repository_PrimaryLanguage_Language>, IGetRepo_Repository_PrimaryLanguage_Language
    {
        public GetRepo_Repository_PrimaryLanguage_Language(global::System.String name, global::System.String? color)
        {
            Name = name;
            Color = color;
        }

        /// <summary>
        /// The name of the current language.
        /// </summary>
        public global::System.String Name { get; }

        /// <summary>
        /// The color defined for the current language.
        /// </summary>
        public global::System.String? Color { get; }

        public virtual global::System.Boolean Equals(GetRepo_Repository_PrimaryLanguage_Language? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Name.Equals(other.Name)) && ((Color is null && other.Color is null) || Color != null && Color.Equals(other.Color));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetRepo_Repository_PrimaryLanguage_Language)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Name.GetHashCode();
                if (Color != null)
                {
                    hash ^= 397 * Color.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A repository pull request template.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetRepo_Repository_PullRequestTemplates_PullRequestTemplate : global::System.IEquatable<GetRepo_Repository_PullRequestTemplates_PullRequestTemplate>, IGetRepo_Repository_PullRequestTemplates_PullRequestTemplate
    {
        public GetRepo_Repository_PullRequestTemplates_PullRequestTemplate(global::System.String? filename)
        {
            Filename = filename;
        }

        /// <summary>
        /// The filename of the template
        /// </summary>
        public global::System.String? Filename { get; }

        public virtual global::System.Boolean Equals(GetRepo_Repository_PullRequestTemplates_PullRequestTemplate? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Filename is null && other.Filename is null) || Filename != null && Filename.Equals(other.Filename)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetRepo_Repository_PullRequestTemplates_PullRequestTemplate)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Filename != null)
                {
                    hash ^= 397 * Filename.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// The connection type for PullRequest.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetRepo_Repository_PullRequests_PullRequestConnection : global::System.IEquatable<GetRepo_Repository_PullRequests_PullRequestConnection>, IGetRepo_Repository_PullRequests_PullRequestConnection
    {
        public GetRepo_Repository_PullRequests_PullRequestConnection(global::System.Collections.Generic.IReadOnlyList<global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_PullRequests_Nodes?>? nodes)
        {
            Nodes = nodes;
        }

        /// <summary>
        /// A list of nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_PullRequests_Nodes?>? Nodes { get; }

        public virtual global::System.Boolean Equals(GetRepo_Repository_PullRequests_PullRequestConnection? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Nodes, other.Nodes));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetRepo_Repository_PullRequests_PullRequestConnection)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Nodes != null)
                {
                    foreach (var Nodes_elm in Nodes)
                    {
                        if (Nodes_elm != null)
                        {
                            hash ^= 397 * Nodes_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// The connection type for Issue.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetRepo_Repository_Issues_IssueConnection : global::System.IEquatable<GetRepo_Repository_Issues_IssueConnection>, IGetRepo_Repository_Issues_IssueConnection
    {
        public GetRepo_Repository_Issues_IssueConnection(global::System.Collections.Generic.IReadOnlyList<global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_Issues_Edges?>? edges)
        {
            Edges = edges;
        }

        /// <summary>
        /// A list of edges.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_Issues_Edges?>? Edges { get; }

        public virtual global::System.Boolean Equals(GetRepo_Repository_Issues_IssueConnection? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (global::StrawberryShake.Helper.ComparisonHelper.SequenceEqual(Edges, other.Edges));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetRepo_Repository_Issues_IssueConnection)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Edges != null)
                {
                    foreach (var Edges_elm in Edges)
                    {
                        if (Edges_elm != null)
                        {
                            hash ^= 397 * Edges_elm.GetHashCode();
                        }
                    }
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// An edge in a connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetRepo_Repository_Discussions_Edges_DiscussionEdge : global::System.IEquatable<GetRepo_Repository_Discussions_Edges_DiscussionEdge>, IGetRepo_Repository_Discussions_Edges_DiscussionEdge
    {
        public GetRepo_Repository_Discussions_Edges_DiscussionEdge(global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_Discussions_Edges_Node? node)
        {
            Node = node;
        }

        /// <summary>
        /// The item at the end of the edge.
        /// </summary>
        public global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_Discussions_Edges_Node? Node { get; }

        public virtual global::System.Boolean Equals(GetRepo_Repository_Discussions_Edges_DiscussionEdge? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Node is null && other.Node is null) || Node != null && Node.Equals(other.Node)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetRepo_Repository_Discussions_Edges_DiscussionEdge)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Node != null)
                {
                    hash ^= 397 * Node.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// An edge in a connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetRepo_Repository_Releases_Edges_ReleaseEdge : global::System.IEquatable<GetRepo_Repository_Releases_Edges_ReleaseEdge>, IGetRepo_Repository_Releases_Edges_ReleaseEdge
    {
        public GetRepo_Repository_Releases_Edges_ReleaseEdge(global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_Releases_Edges_Node? node)
        {
            Node = node;
        }

        /// <summary>
        /// The item at the end of the edge.
        /// </summary>
        public global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_Releases_Edges_Node? Node { get; }

        public virtual global::System.Boolean Equals(GetRepo_Repository_Releases_Edges_ReleaseEdge? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Node is null && other.Node is null) || Node != null && Node.Equals(other.Node)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetRepo_Repository_Releases_Edges_ReleaseEdge)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Node != null)
                {
                    hash ^= 397 * Node.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// An error in a `CODEOWNERS` file.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetRepo_Repository_Codeowners_Errors_RepositoryCodeownersError : global::System.IEquatable<GetRepo_Repository_Codeowners_Errors_RepositoryCodeownersError>, IGetRepo_Repository_Codeowners_Errors_RepositoryCodeownersError
    {
        public GetRepo_Repository_Codeowners_Errors_RepositoryCodeownersError(global::System.String kind)
        {
            Kind = kind;
        }

        /// <summary>
        /// A short string describing the type of error.
        /// </summary>
        public global::System.String Kind { get; }

        public virtual global::System.Boolean Equals(GetRepo_Repository_Codeowners_Errors_RepositoryCodeownersError? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Kind.Equals(other.Kind));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetRepo_Repository_Codeowners_Errors_RepositoryCodeownersError)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Kind.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a Git blob.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetRepo_Repository_DefaultBranchRef_Target_Blob : global::System.IEquatable<GetRepo_Repository_DefaultBranchRef_Target_Blob>, IGetRepo_Repository_DefaultBranchRef_Target_Blob
    {
        public GetRepo_Repository_DefaultBranchRef_Target_Blob(global::System.Uri commitResourcePath)
        {
            CommitResourcePath = commitResourcePath;
        }

        /// <summary>
        /// The HTTP path for this Git object
        /// </summary>
        public global::System.Uri CommitResourcePath { get; }

        public virtual global::System.Boolean Equals(GetRepo_Repository_DefaultBranchRef_Target_Blob? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (CommitResourcePath.Equals(other.CommitResourcePath));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetRepo_Repository_DefaultBranchRef_Target_Blob)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * CommitResourcePath.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a Git commit.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetRepo_Repository_DefaultBranchRef_Target_Commit : global::System.IEquatable<GetRepo_Repository_DefaultBranchRef_Target_Commit>, IGetRepo_Repository_DefaultBranchRef_Target_Commit
    {
        public GetRepo_Repository_DefaultBranchRef_Target_Commit(global::System.Uri commitResourcePath)
        {
            CommitResourcePath = commitResourcePath;
        }

        /// <summary>
        /// The HTTP path for this Git object
        /// </summary>
        public global::System.Uri CommitResourcePath { get; }

        public virtual global::System.Boolean Equals(GetRepo_Repository_DefaultBranchRef_Target_Commit? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (CommitResourcePath.Equals(other.CommitResourcePath));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetRepo_Repository_DefaultBranchRef_Target_Commit)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * CommitResourcePath.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a Git tag.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetRepo_Repository_DefaultBranchRef_Target_Tag : global::System.IEquatable<GetRepo_Repository_DefaultBranchRef_Target_Tag>, IGetRepo_Repository_DefaultBranchRef_Target_Tag
    {
        public GetRepo_Repository_DefaultBranchRef_Target_Tag(global::System.Uri commitResourcePath)
        {
            CommitResourcePath = commitResourcePath;
        }

        /// <summary>
        /// The HTTP path for this Git object
        /// </summary>
        public global::System.Uri CommitResourcePath { get; }

        public virtual global::System.Boolean Equals(GetRepo_Repository_DefaultBranchRef_Target_Tag? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (CommitResourcePath.Equals(other.CommitResourcePath));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetRepo_Repository_DefaultBranchRef_Target_Tag)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * CommitResourcePath.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a Git tree.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetRepo_Repository_DefaultBranchRef_Target_Tree : global::System.IEquatable<GetRepo_Repository_DefaultBranchRef_Target_Tree>, IGetRepo_Repository_DefaultBranchRef_Target_Tree
    {
        public GetRepo_Repository_DefaultBranchRef_Target_Tree(global::System.Uri commitResourcePath)
        {
            CommitResourcePath = commitResourcePath;
        }

        /// <summary>
        /// The HTTP path for this Git object
        /// </summary>
        public global::System.Uri CommitResourcePath { get; }

        public virtual global::System.Boolean Equals(GetRepo_Repository_DefaultBranchRef_Target_Tree? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (CommitResourcePath.Equals(other.CommitResourcePath));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetRepo_Repository_DefaultBranchRef_Target_Tree)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * CommitResourcePath.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// A branch protection rule.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetRepo_Repository_DefaultBranchRef_BranchProtectionRule_BranchProtectionRule : global::System.IEquatable<GetRepo_Repository_DefaultBranchRef_BranchProtectionRule_BranchProtectionRule>, IGetRepo_Repository_DefaultBranchRef_BranchProtectionRule_BranchProtectionRule
    {
        public GetRepo_Repository_DefaultBranchRef_BranchProtectionRule_BranchProtectionRule(global::System.Boolean allowsForcePushes, global::System.Boolean dismissesStaleReviews, global::System.Boolean lockBranch, global::System.Boolean requiresApprovingReviews, global::System.Boolean requiresConversationResolution, global::System.Boolean requiresStatusChecks, global::System.Boolean requiresStrictStatusChecks)
        {
            AllowsForcePushes = allowsForcePushes;
            DismissesStaleReviews = dismissesStaleReviews;
            LockBranch = lockBranch;
            RequiresApprovingReviews = requiresApprovingReviews;
            RequiresConversationResolution = requiresConversationResolution;
            RequiresStatusChecks = requiresStatusChecks;
            RequiresStrictStatusChecks = requiresStrictStatusChecks;
        }

        /// <summary>
        /// Are force pushes allowed on this branch.
        /// </summary>
        public global::System.Boolean AllowsForcePushes { get; }

        /// <summary>
        /// Will new commits pushed to matching branches dismiss pull request review approvals.
        /// </summary>
        public global::System.Boolean DismissesStaleReviews { get; }

        /// <summary>
        /// Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
        /// </summary>
        public global::System.Boolean LockBranch { get; }

        /// <summary>
        /// Are approving reviews required to update matching branches.
        /// </summary>
        public global::System.Boolean RequiresApprovingReviews { get; }

        /// <summary>
        /// Are conversations required to be resolved before merging.
        /// </summary>
        public global::System.Boolean RequiresConversationResolution { get; }

        /// <summary>
        /// Are status checks required to update matching branches.
        /// </summary>
        public global::System.Boolean RequiresStatusChecks { get; }

        /// <summary>
        /// Are branches required to be up to date before merging.
        /// </summary>
        public global::System.Boolean RequiresStrictStatusChecks { get; }

        public virtual global::System.Boolean Equals(GetRepo_Repository_DefaultBranchRef_BranchProtectionRule_BranchProtectionRule? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (AllowsForcePushes == other.AllowsForcePushes) && DismissesStaleReviews == other.DismissesStaleReviews && LockBranch == other.LockBranch && RequiresApprovingReviews == other.RequiresApprovingReviews && RequiresConversationResolution == other.RequiresConversationResolution && RequiresStatusChecks == other.RequiresStatusChecks && RequiresStrictStatusChecks == other.RequiresStrictStatusChecks;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetRepo_Repository_DefaultBranchRef_BranchProtectionRule_BranchProtectionRule)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * AllowsForcePushes.GetHashCode();
                hash ^= 397 * DismissesStaleReviews.GetHashCode();
                hash ^= 397 * LockBranch.GetHashCode();
                hash ^= 397 * RequiresApprovingReviews.GetHashCode();
                hash ^= 397 * RequiresConversationResolution.GetHashCode();
                hash ^= 397 * RequiresStatusChecks.GetHashCode();
                hash ^= 397 * RequiresStrictStatusChecks.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// A repository pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetRepo_Repository_PullRequests_Nodes_PullRequest : global::System.IEquatable<GetRepo_Repository_PullRequests_Nodes_PullRequest>, IGetRepo_Repository_PullRequests_Nodes_PullRequest
    {
        public GetRepo_Repository_PullRequests_Nodes_PullRequest(global::System.DateTimeOffset createdAt)
        {
            CreatedAt = createdAt;
        }

        /// <summary>
        /// Identifies the date and time when the object was created.
        /// </summary>
        public global::System.DateTimeOffset CreatedAt { get; }

        public virtual global::System.Boolean Equals(GetRepo_Repository_PullRequests_Nodes_PullRequest? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (CreatedAt.Equals(other.CreatedAt));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetRepo_Repository_PullRequests_Nodes_PullRequest)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * CreatedAt.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// An edge in a connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetRepo_Repository_Issues_Edges_IssueEdge : global::System.IEquatable<GetRepo_Repository_Issues_Edges_IssueEdge>, IGetRepo_Repository_Issues_Edges_IssueEdge
    {
        public GetRepo_Repository_Issues_Edges_IssueEdge(global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_Issues_Edges_Node? node)
        {
            Node = node;
        }

        /// <summary>
        /// The item at the end of the edge.
        /// </summary>
        public global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_Issues_Edges_Node? Node { get; }

        public virtual global::System.Boolean Equals(GetRepo_Repository_Issues_Edges_IssueEdge? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Node is null && other.Node is null) || Node != null && Node.Equals(other.Node)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetRepo_Repository_Issues_Edges_IssueEdge)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Node != null)
                {
                    hash ^= 397 * Node.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A discussion in a repository.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetRepo_Repository_Discussions_Edges_Node_Discussion : global::System.IEquatable<GetRepo_Repository_Discussions_Edges_Node_Discussion>, IGetRepo_Repository_Discussions_Edges_Node_Discussion
    {
        public GetRepo_Repository_Discussions_Edges_Node_Discussion(global::System.Int32 number, global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_Discussions_Edges_Node_Answer? answer)
        {
            Number = number;
            Answer = answer;
        }

        /// <summary>
        /// The number identifying this discussion within the repository.
        /// </summary>
        public global::System.Int32 Number { get; }

        /// <summary>
        /// The comment chosen as this discussion's answer, if any.
        /// </summary>
        public global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_Discussions_Edges_Node_Answer? Answer { get; }

        public virtual global::System.Boolean Equals(GetRepo_Repository_Discussions_Edges_Node_Discussion? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (Number == other.Number) && ((Answer is null && other.Answer is null) || Answer != null && Answer.Equals(other.Answer));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetRepo_Repository_Discussions_Edges_Node_Discussion)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * Number.GetHashCode();
                if (Answer != null)
                {
                    hash ^= 397 * Answer.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A release contains the content for a release.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetRepo_Repository_Releases_Edges_Node_Release : global::System.IEquatable<GetRepo_Repository_Releases_Edges_Node_Release>, IGetRepo_Repository_Releases_Edges_Node_Release
    {
        public GetRepo_Repository_Releases_Edges_Node_Release(global::System.String? name, global::System.Uri url)
        {
            Name = name;
            Url = url;
        }

        /// <summary>
        /// The title of the release.
        /// </summary>
        public global::System.String? Name { get; }

        /// <summary>
        /// The HTTP URL for this issue
        /// </summary>
        public global::System.Uri Url { get; }

        public virtual global::System.Boolean Equals(GetRepo_Repository_Releases_Edges_Node_Release? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Name is null && other.Name is null) || Name != null && Name.Equals(other.Name))) && Url.Equals(other.Url);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetRepo_Repository_Releases_Edges_Node_Release)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Name != null)
                {
                    hash ^= 397 * Name.GetHashCode();
                }

                hash ^= 397 * Url.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetRepo_Repository_Issues_Edges_Node_Issue : global::System.IEquatable<GetRepo_Repository_Issues_Edges_Node_Issue>, IGetRepo_Repository_Issues_Edges_Node_Issue
    {
        public GetRepo_Repository_Issues_Edges_Node_Issue(global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_Issues_Edges_Node_Labels? labels, global::System.Int32 number, global::System.DateTimeOffset createdAt)
        {
            Labels = labels;
            Number = number;
            CreatedAt = createdAt;
        }

        /// <summary>
        /// A list of labels associated with the object.
        /// </summary>
        public global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_Issues_Edges_Node_Labels? Labels { get; }

        /// <summary>
        /// Identifies the issue number.
        /// </summary>
        public global::System.Int32 Number { get; }

        /// <summary>
        /// Identifies the date and time when the object was created.
        /// </summary>
        public global::System.DateTimeOffset CreatedAt { get; }

        public virtual global::System.Boolean Equals(GetRepo_Repository_Issues_Edges_Node_Issue? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Labels is null && other.Labels is null) || Labels != null && Labels.Equals(other.Labels))) && Number == other.Number && CreatedAt.Equals(other.CreatedAt);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetRepo_Repository_Issues_Edges_Node_Issue)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Labels != null)
                {
                    hash ^= 397 * Labels.GetHashCode();
                }

                hash ^= 397 * Number.GetHashCode();
                hash ^= 397 * CreatedAt.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// A comment on a discussion.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetRepo_Repository_Discussions_Edges_Node_Answer_DiscussionComment : global::System.IEquatable<GetRepo_Repository_Discussions_Edges_Node_Answer_DiscussionComment>, IGetRepo_Repository_Discussions_Edges_Node_Answer_DiscussionComment
    {
        public GetRepo_Repository_Discussions_Edges_Node_Answer_DiscussionComment(global::System.Boolean isAnswer)
        {
            IsAnswer = isAnswer;
        }

        /// <summary>
        /// Has this comment been chosen as the answer of its discussion?
        /// </summary>
        public global::System.Boolean IsAnswer { get; }

        public virtual global::System.Boolean Equals(GetRepo_Repository_Discussions_Edges_Node_Answer_DiscussionComment? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (IsAnswer == other.IsAnswer);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetRepo_Repository_Discussions_Edges_Node_Answer_DiscussionComment)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * IsAnswer.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// The connection type for Label.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetRepo_Repository_Issues_Edges_Node_Labels_LabelConnection : global::System.IEquatable<GetRepo_Repository_Issues_Edges_Node_Labels_LabelConnection>, IGetRepo_Repository_Issues_Edges_Node_Labels_LabelConnection
    {
        public GetRepo_Repository_Issues_Edges_Node_Labels_LabelConnection(global::System.Int32 totalCount)
        {
            TotalCount = totalCount;
        }

        /// <summary>
        /// Identifies the total count of items in the connection.
        /// </summary>
        public global::System.Int32 TotalCount { get; }

        public virtual global::System.Boolean Equals(GetRepo_Repository_Issues_Edges_Node_Labels_LabelConnection? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (TotalCount == other.TotalCount);
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetRepo_Repository_Issues_Edges_Node_Labels_LabelConnection)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                hash ^= 397 * TotalCount.GetHashCode();
                return hash;
            }
        }
    }

    /// <summary>
    /// The query root of GitHub's GraphQL interface.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetRepoResult
    {
        /// <summary>
        /// Lookup a given repository by the owner and repository name.
        /// </summary>
        public global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository? Repository { get; }
    }

    /// <summary>
    /// A repository contains the content for a project.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetRepo_Repository
    {
        /// <summary>
        /// A list of discussions that have been opened in the repository.
        /// </summary>
        public global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_Discussions Discussions { get; }

        /// <summary>
        /// Returns true if this repository has a security policy
        /// </summary>
        public global::System.Boolean? IsSecurityPolicyEnabled { get; }

        /// <summary>
        /// The security policy URL.
        /// </summary>
        public global::System.Uri? SecurityPolicyUrl { get; }

        /// <summary>
        /// Whether vulnerability alerts are enabled for the repository.
        /// </summary>
        public global::System.Boolean HasVulnerabilityAlertsEnabled { get; }

        /// <summary>
        /// A list of vulnerability alerts that are on this repository.
        /// </summary>
        public global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_VulnerabilityAlerts? VulnerabilityAlerts { get; }

        /// <summary>
        /// List of releases which are dependent on this repository.
        /// </summary>
        public global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_Releases Releases { get; }

        /// <summary>
        /// The number of kilobytes this repository occupies on disk.
        /// </summary>
        public global::System.Int32? DiskUsage { get; }

        /// <summary>
        /// Identifies the date and time when the object was last updated.
        /// </summary>
        public global::System.DateTimeOffset UpdatedAt { get; }

        /// <summary>
        /// Identifies when the repository was last pushed to.
        /// </summary>
        public global::System.DateTimeOffset? PushedAt { get; }

        /// <summary>
        /// A list of applied repository-topic associations for this repository.
        /// </summary>
        public global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_RepositoryTopics RepositoryTopics { get; }

        /// <summary>
        /// Returns the code of conduct for this repository
        /// </summary>
        public global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_CodeOfConduct? CodeOfConduct { get; }

        /// <summary>
        /// Information extracted from the repository's `CODEOWNERS` file.
        /// </summary>
        public global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_Codeowners? Codeowners { get; }

        /// <summary>
        /// The Ref associated with the repository's default branch.
        /// </summary>
        public global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_DefaultBranchRef? DefaultBranchRef { get; }

        /// <summary>
        /// The description of the repository.
        /// </summary>
        public global::System.String? Description { get; }

        /// <summary>
        /// Indicates if the repository has the Discussions feature enabled.
        /// </summary>
        public global::System.Boolean HasDiscussionsEnabled { get; }

        /// <summary>
        /// Indicates if the repository has issues feature enabled.
        /// </summary>
        public global::System.Boolean HasIssuesEnabled { get; }

        /// <summary>
        /// Indicates if the repository is unmaintained.
        /// </summary>
        public global::System.Boolean IsArchived { get; }

        /// <summary>
        /// Returns whether or not this repository is empty.
        /// </summary>
        public global::System.Boolean IsEmpty { get; }

        /// <summary>
        /// Indicates if the repository has been locked or not.
        /// </summary>
        public global::System.Boolean IsLocked { get; }

        /// <summary>
        /// Returns a list of issue templates associated to the repository
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_IssueTemplates>? IssueTemplates { get; }

        /// <summary>
        /// The license associated with the repository
        /// </summary>
        public global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_LicenseInfo? LicenseInfo { get; }

        /// <summary>
        /// The image used to represent this repository in Open Graph data.
        /// </summary>
        public global::System.Uri OpenGraphImageUrl { get; }

        /// <summary>
        /// The primary language of the repository's code.
        /// </summary>
        public global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_PrimaryLanguage? PrimaryLanguage { get; }

        /// <summary>
        /// Returns a list of pull request templates associated to the repository
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_PullRequestTemplates>? PullRequestTemplates { get; }

        /// <summary>
        /// The HTTP URL for this repository
        /// </summary>
        public global::System.Uri Url { get; }

        /// <summary>
        /// A list of pull requests that have been opened in the repository.
        /// </summary>
        public global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_PullRequests PullRequests { get; }

        /// <summary>
        /// A list of issues that have been opened in the repository.
        /// </summary>
        public global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_Issues Issues { get; }
    }

    /// <summary>
    /// A repository contains the content for a project.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetRepo_Repository_Repository : IGetRepo_Repository
    {
    }

    /// <summary>
    /// The connection type for Discussion.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetRepo_Repository_Discussions
    {
        /// <summary>
        /// A list of edges.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_Discussions_Edges?>? Edges { get; }

        /// <summary>
        /// Identifies the total count of items in the connection.
        /// </summary>
        public global::System.Int32 TotalCount { get; }
    }

    /// <summary>
    /// The connection type for Discussion.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetRepo_Repository_Discussions_DiscussionConnection : IGetRepo_Repository_Discussions
    {
    }

    /// <summary>
    /// The connection type for RepositoryVulnerabilityAlert.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetRepo_Repository_VulnerabilityAlerts
    {
        /// <summary>
        /// Identifies the total count of items in the connection.
        /// </summary>
        public global::System.Int32 TotalCount { get; }
    }

    /// <summary>
    /// The connection type for RepositoryVulnerabilityAlert.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetRepo_Repository_VulnerabilityAlerts_RepositoryVulnerabilityAlertConnection : IGetRepo_Repository_VulnerabilityAlerts
    {
    }

    /// <summary>
    /// The connection type for Release.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetRepo_Repository_Releases
    {
        /// <summary>
        /// A list of edges.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_Releases_Edges?>? Edges { get; }
    }

    /// <summary>
    /// The connection type for Release.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetRepo_Repository_Releases_ReleaseConnection : IGetRepo_Repository_Releases
    {
    }

    /// <summary>
    /// The connection type for RepositoryTopic.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetRepo_Repository_RepositoryTopics
    {
        /// <summary>
        /// Identifies the total count of items in the connection.
        /// </summary>
        public global::System.Int32 TotalCount { get; }
    }

    /// <summary>
    /// The connection type for RepositoryTopic.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetRepo_Repository_RepositoryTopics_RepositoryTopicConnection : IGetRepo_Repository_RepositoryTopics
    {
    }

    /// <summary>
    /// The Code of Conduct for a repository
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetRepo_Repository_CodeOfConduct
    {
        /// <summary>
        /// The HTTP URL for this Code of Conduct
        /// </summary>
        public global::System.Uri? Url { get; }

        /// <summary>
        /// The formal name of the Code of Conduct
        /// </summary>
        public global::System.String Name { get; }
    }

    /// <summary>
    /// The Code of Conduct for a repository
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetRepo_Repository_CodeOfConduct_CodeOfConduct : IGetRepo_Repository_CodeOfConduct
    {
    }

    /// <summary>
    /// Information extracted from a repository's `CODEOWNERS` file.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetRepo_Repository_Codeowners
    {
        /// <summary>
        /// Any problems that were encountered while parsing the `CODEOWNERS` file.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_Codeowners_Errors> Errors { get; }
    }

    /// <summary>
    /// Information extracted from a repository's `CODEOWNERS` file.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetRepo_Repository_Codeowners_RepositoryCodeowners : IGetRepo_Repository_Codeowners
    {
    }

    /// <summary>
    /// Represents a Git reference.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetRepo_Repository_DefaultBranchRef
    {
        /// <summary>
        /// The ref name.
        /// </summary>
        public global::System.String Name { get; }

        /// <summary>
        /// The object the ref points to. Returns null when object does not exist.
        /// </summary>
        public global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_DefaultBranchRef_Target? Target { get; }

        /// <summary>
        /// Branch protection rules for this ref
        /// </summary>
        public global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_DefaultBranchRef_BranchProtectionRule? BranchProtectionRule { get; }
    }

    /// <summary>
    /// Represents a Git reference.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetRepo_Repository_DefaultBranchRef_Ref : IGetRepo_Repository_DefaultBranchRef
    {
    }

    /// <summary>
    /// A repository issue template.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetRepo_Repository_IssueTemplates
    {
        /// <summary>
        /// The template name.
        /// </summary>
        public global::System.String Name { get; }

        /// <summary>
        /// The template filename.
        /// </summary>
        public global::System.String Filename { get; }
    }

    /// <summary>
    /// A repository issue template.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetRepo_Repository_IssueTemplates_IssueTemplate : IGetRepo_Repository_IssueTemplates
    {
    }

    /// <summary>
    /// A repository's open source license
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetRepo_Repository_LicenseInfo
    {
        /// <summary>
        /// The license full name specified by <https: / / spdx.org / licenses>
        /// </summary>
        public global::System.String Name { get; }

        /// <summary>
        /// URL to the license on <https: / / choosealicense.com>
        /// </summary>
        public global::System.Uri? Url { get; }
    }

    /// <summary>
    /// A repository's open source license
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetRepo_Repository_LicenseInfo_License : IGetRepo_Repository_LicenseInfo
    {
    }

    /// <summary>
    /// Represents a given language found in repositories.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetRepo_Repository_PrimaryLanguage
    {
        /// <summary>
        /// The name of the current language.
        /// </summary>
        public global::System.String Name { get; }

        /// <summary>
        /// The color defined for the current language.
        /// </summary>
        public global::System.String? Color { get; }
    }

    /// <summary>
    /// Represents a given language found in repositories.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetRepo_Repository_PrimaryLanguage_Language : IGetRepo_Repository_PrimaryLanguage
    {
    }

    /// <summary>
    /// A repository pull request template.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetRepo_Repository_PullRequestTemplates
    {
        /// <summary>
        /// The filename of the template
        /// </summary>
        public global::System.String? Filename { get; }
    }

    /// <summary>
    /// A repository pull request template.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetRepo_Repository_PullRequestTemplates_PullRequestTemplate : IGetRepo_Repository_PullRequestTemplates
    {
    }

    /// <summary>
    /// The connection type for PullRequest.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetRepo_Repository_PullRequests
    {
        /// <summary>
        /// A list of nodes.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_PullRequests_Nodes?>? Nodes { get; }
    }

    /// <summary>
    /// The connection type for PullRequest.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetRepo_Repository_PullRequests_PullRequestConnection : IGetRepo_Repository_PullRequests
    {
    }

    /// <summary>
    /// The connection type for Issue.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetRepo_Repository_Issues
    {
        /// <summary>
        /// A list of edges.
        /// </summary>
        public global::System.Collections.Generic.IReadOnlyList<global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_Issues_Edges?>? Edges { get; }
    }

    /// <summary>
    /// The connection type for Issue.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetRepo_Repository_Issues_IssueConnection : IGetRepo_Repository_Issues
    {
    }

    /// <summary>
    /// An edge in a connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetRepo_Repository_Discussions_Edges
    {
        /// <summary>
        /// The item at the end of the edge.
        /// </summary>
        public global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_Discussions_Edges_Node? Node { get; }
    }

    /// <summary>
    /// An edge in a connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetRepo_Repository_Discussions_Edges_DiscussionEdge : IGetRepo_Repository_Discussions_Edges
    {
    }

    /// <summary>
    /// An edge in a connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetRepo_Repository_Releases_Edges
    {
        /// <summary>
        /// The item at the end of the edge.
        /// </summary>
        public global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_Releases_Edges_Node? Node { get; }
    }

    /// <summary>
    /// An edge in a connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetRepo_Repository_Releases_Edges_ReleaseEdge : IGetRepo_Repository_Releases_Edges
    {
    }

    /// <summary>
    /// An error in a `CODEOWNERS` file.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetRepo_Repository_Codeowners_Errors
    {
        /// <summary>
        /// A short string describing the type of error.
        /// </summary>
        public global::System.String Kind { get; }
    }

    /// <summary>
    /// An error in a `CODEOWNERS` file.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetRepo_Repository_Codeowners_Errors_RepositoryCodeownersError : IGetRepo_Repository_Codeowners_Errors
    {
    }

    /// <summary>
    /// Represents a Git object.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetRepo_Repository_DefaultBranchRef_Target
    {
        /// <summary>
        /// The HTTP path for this Git object
        /// </summary>
        public global::System.Uri CommitResourcePath { get; }
    }

    /// <summary>
    /// Represents a Git blob.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetRepo_Repository_DefaultBranchRef_Target_Blob : IGetRepo_Repository_DefaultBranchRef_Target
    {
    }

    /// <summary>
    /// Represents a Git commit.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetRepo_Repository_DefaultBranchRef_Target_Commit : IGetRepo_Repository_DefaultBranchRef_Target
    {
    }

    /// <summary>
    /// Represents a Git tag.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetRepo_Repository_DefaultBranchRef_Target_Tag : IGetRepo_Repository_DefaultBranchRef_Target
    {
    }

    /// <summary>
    /// Represents a Git tree.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetRepo_Repository_DefaultBranchRef_Target_Tree : IGetRepo_Repository_DefaultBranchRef_Target
    {
    }

    /// <summary>
    /// A branch protection rule.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetRepo_Repository_DefaultBranchRef_BranchProtectionRule
    {
        /// <summary>
        /// Are force pushes allowed on this branch.
        /// </summary>
        public global::System.Boolean AllowsForcePushes { get; }

        /// <summary>
        /// Will new commits pushed to matching branches dismiss pull request review approvals.
        /// </summary>
        public global::System.Boolean DismissesStaleReviews { get; }

        /// <summary>
        /// Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
        /// </summary>
        public global::System.Boolean LockBranch { get; }

        /// <summary>
        /// Are approving reviews required to update matching branches.
        /// </summary>
        public global::System.Boolean RequiresApprovingReviews { get; }

        /// <summary>
        /// Are conversations required to be resolved before merging.
        /// </summary>
        public global::System.Boolean RequiresConversationResolution { get; }

        /// <summary>
        /// Are status checks required to update matching branches.
        /// </summary>
        public global::System.Boolean RequiresStatusChecks { get; }

        /// <summary>
        /// Are branches required to be up to date before merging.
        /// </summary>
        public global::System.Boolean RequiresStrictStatusChecks { get; }
    }

    /// <summary>
    /// A branch protection rule.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetRepo_Repository_DefaultBranchRef_BranchProtectionRule_BranchProtectionRule : IGetRepo_Repository_DefaultBranchRef_BranchProtectionRule
    {
    }

    /// <summary>
    /// A repository pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetRepo_Repository_PullRequests_Nodes
    {
        /// <summary>
        /// Identifies the date and time when the object was created.
        /// </summary>
        public global::System.DateTimeOffset CreatedAt { get; }
    }

    /// <summary>
    /// A repository pull request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetRepo_Repository_PullRequests_Nodes_PullRequest : IGetRepo_Repository_PullRequests_Nodes
    {
    }

    /// <summary>
    /// An edge in a connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetRepo_Repository_Issues_Edges
    {
        /// <summary>
        /// The item at the end of the edge.
        /// </summary>
        public global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_Issues_Edges_Node? Node { get; }
    }

    /// <summary>
    /// An edge in a connection.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetRepo_Repository_Issues_Edges_IssueEdge : IGetRepo_Repository_Issues_Edges
    {
    }

    /// <summary>
    /// A discussion in a repository.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetRepo_Repository_Discussions_Edges_Node
    {
        /// <summary>
        /// The number identifying this discussion within the repository.
        /// </summary>
        public global::System.Int32 Number { get; }

        /// <summary>
        /// The comment chosen as this discussion's answer, if any.
        /// </summary>
        public global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_Discussions_Edges_Node_Answer? Answer { get; }
    }

    /// <summary>
    /// A discussion in a repository.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetRepo_Repository_Discussions_Edges_Node_Discussion : IGetRepo_Repository_Discussions_Edges_Node
    {
    }

    /// <summary>
    /// A release contains the content for a release.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetRepo_Repository_Releases_Edges_Node
    {
        /// <summary>
        /// The title of the release.
        /// </summary>
        public global::System.String? Name { get; }

        /// <summary>
        /// The HTTP URL for this issue
        /// </summary>
        public global::System.Uri Url { get; }
    }

    /// <summary>
    /// A release contains the content for a release.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetRepo_Repository_Releases_Edges_Node_Release : IGetRepo_Repository_Releases_Edges_Node
    {
    }

    /// <summary>
    /// An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetRepo_Repository_Issues_Edges_Node
    {
        /// <summary>
        /// A list of labels associated with the object.
        /// </summary>
        public global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_Issues_Edges_Node_Labels? Labels { get; }

        /// <summary>
        /// Identifies the issue number.
        /// </summary>
        public global::System.Int32 Number { get; }

        /// <summary>
        /// Identifies the date and time when the object was created.
        /// </summary>
        public global::System.DateTimeOffset CreatedAt { get; }
    }

    /// <summary>
    /// An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetRepo_Repository_Issues_Edges_Node_Issue : IGetRepo_Repository_Issues_Edges_Node
    {
    }

    /// <summary>
    /// A comment on a discussion.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetRepo_Repository_Discussions_Edges_Node_Answer
    {
        /// <summary>
        /// Has this comment been chosen as the answer of its discussion?
        /// </summary>
        public global::System.Boolean IsAnswer { get; }
    }

    /// <summary>
    /// A comment on a discussion.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetRepo_Repository_Discussions_Edges_Node_Answer_DiscussionComment : IGetRepo_Repository_Discussions_Edges_Node_Answer
    {
    }

    /// <summary>
    /// The connection type for Label.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetRepo_Repository_Issues_Edges_Node_Labels
    {
        /// <summary>
        /// Identifies the total count of items in the connection.
        /// </summary>
        public global::System.Int32 TotalCount { get; }
    }

    /// <summary>
    /// The connection type for Label.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetRepo_Repository_Issues_Edges_Node_Labels_LabelConnection : IGetRepo_Repository_Issues_Edges_Node_Labels
    {
    }

    /// <summary>
    /// The query root of GitHub's GraphQL interface.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetFileResult : global::System.IEquatable<GetFileResult>, IGetFileResult
    {
        public GetFileResult(global::RepositoryAnalysis.Internal.GraphQL.IGetFile_Repository? repository)
        {
            Repository = repository;
        }

        /// <summary>
        /// Lookup a given repository by the owner and repository name.
        /// </summary>
        public global::RepositoryAnalysis.Internal.GraphQL.IGetFile_Repository? Repository { get; }

        public virtual global::System.Boolean Equals(GetFileResult? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Repository is null && other.Repository is null) || Repository != null && Repository.Equals(other.Repository)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetFileResult)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Repository != null)
                {
                    hash ^= 397 * Repository.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// A repository contains the content for a project.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetFile_Repository_Repository : global::System.IEquatable<GetFile_Repository_Repository>, IGetFile_Repository_Repository
    {
        public GetFile_Repository_Repository(global::RepositoryAnalysis.Internal.GraphQL.IGetFile_Repository_File? file)
        {
            File = file;
        }

        /// <summary>
        /// A Git object in the repository
        /// </summary>
        public global::RepositoryAnalysis.Internal.GraphQL.IGetFile_Repository_File? File { get; }

        public virtual global::System.Boolean Equals(GetFile_Repository_Repository? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((File is null && other.File is null) || File != null && File.Equals(other.File)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetFile_Repository_Repository)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (File != null)
                {
                    hash ^= 397 * File.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a Git blob.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetFile_Repository_File_Blob : global::System.IEquatable<GetFile_Repository_File_Blob>, IGetFile_Repository_File_Blob
    {
        public GetFile_Repository_File_Blob(global::System.String? text)
        {
            Text = text;
        }

        /// <summary>
        /// UTF8 text data or null if the Blob is binary
        /// </summary>
        public global::System.String? Text { get; }

        public virtual global::System.Boolean Equals(GetFile_Repository_File_Blob? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return (((Text is null && other.Text is null) || Text != null && Text.Equals(other.Text)));
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetFile_Repository_File_Blob)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                if (Text != null)
                {
                    hash ^= 397 * Text.GetHashCode();
                }

                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a Git commit.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetFile_Repository_File_Commit : global::System.IEquatable<GetFile_Repository_File_Commit>, IGetFile_Repository_File_Commit
    {
        public GetFile_Repository_File_Commit()
        {
        }

        public virtual global::System.Boolean Equals(GetFile_Repository_File_Commit? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetFile_Repository_File_Commit)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a Git tag.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetFile_Repository_File_Tag : global::System.IEquatable<GetFile_Repository_File_Tag>, IGetFile_Repository_File_Tag
    {
        public GetFile_Repository_File_Tag()
        {
        }

        public virtual global::System.Boolean Equals(GetFile_Repository_File_Tag? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetFile_Repository_File_Tag)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// Represents a Git tree.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetFile_Repository_File_Tree : global::System.IEquatable<GetFile_Repository_File_Tree>, IGetFile_Repository_File_Tree
    {
        public GetFile_Repository_File_Tree()
        {
        }

        public virtual global::System.Boolean Equals(GetFile_Repository_File_Tree? other)
        {
            if (ReferenceEquals(null, other))
            {
                return false;
            }

            if (ReferenceEquals(this, other))
            {
                return true;
            }

            if (other.GetType() != GetType())
            {
                return false;
            }

            return true;
        }

        public override global::System.Boolean Equals(global::System.Object? obj)
        {
            if (ReferenceEquals(null, obj))
            {
                return false;
            }

            if (ReferenceEquals(this, obj))
            {
                return true;
            }

            if (obj.GetType() != GetType())
            {
                return false;
            }

            return Equals((GetFile_Repository_File_Tree)obj);
        }

        public override global::System.Int32 GetHashCode()
        {
            unchecked
            {
                int hash = 5;
                return hash;
            }
        }
    }

    /// <summary>
    /// The query root of GitHub's GraphQL interface.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetFileResult
    {
        /// <summary>
        /// Lookup a given repository by the owner and repository name.
        /// </summary>
        public global::RepositoryAnalysis.Internal.GraphQL.IGetFile_Repository? Repository { get; }
    }

    /// <summary>
    /// A repository contains the content for a project.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetFile_Repository
    {
        /// <summary>
        /// A Git object in the repository
        /// </summary>
        public global::RepositoryAnalysis.Internal.GraphQL.IGetFile_Repository_File? File { get; }
    }

    /// <summary>
    /// A repository contains the content for a project.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetFile_Repository_Repository : IGetFile_Repository
    {
    }

    /// <summary>
    /// Represents a Git object.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetFile_Repository_File
    {
    }

    /// <summary>
    /// Represents a Git blob.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetFile_Repository_File_Blob : IGetFile_Repository_File
    {
        /// <summary>
        /// UTF8 text data or null if the Blob is binary
        /// </summary>
        public global::System.String? Text { get; }
    }

    /// <summary>
    /// Represents a Git commit.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetFile_Repository_File_Commit : IGetFile_Repository_File
    {
    }

    /// <summary>
    /// Represents a Git tag.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetFile_Repository_File_Tag : IGetFile_Repository_File
    {
    }

    /// <summary>
    /// Represents a Git tree.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetFile_Repository_File_Tree : IGetFile_Repository_File
    {
    }

    /// <summary>
    /// Represents the operation service of the GetAge GraphQL operation
    /// <code>
    /// query GetAge($name: String!, $owner: String!) {
    ///   repository(name: $name, owner: $owner) {
    ///     __typename
    ///     updatedAt
    ///     pushedAt
    ///     ... on Repository {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetAgeQueryDocument : global::StrawberryShake.IDocument
    {
        private GetAgeQueryDocument()
        {
        }

        public static GetAgeQueryDocument Instance { get; } = new GetAgeQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x28, 0x24, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x28, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x24, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x20, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x3a, 0x20, 0x24, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x20, 0x70, 0x75, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "8d03ec28f3fd4545e3941ca488444185");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetAge GraphQL operation
    /// <code>
    /// query GetAge($name: String!, $owner: String!) {
    ///   repository(name: $name, owner: $owner) {
    ///     __typename
    ///     updatedAt
    ///     pushedAt
    ///     ... on Repository {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetAgeQuery : global::RepositoryAnalysis.Internal.GraphQL.IGetAgeQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetAgeResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public GetAgeQuery(global::StrawberryShake.IOperationExecutor<IGetAgeResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetAgeResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetAgeResult>> ExecuteAsync(global::System.String name, global::System.String owner, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(name, owner);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetAgeResult>> Watch(global::System.String name, global::System.String owner, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(name, owner);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String name, global::System.String owner)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("name", FormatName(name));
            variables.Add("owner", FormatOwner(owner));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetAgeQueryDocument.Instance.Hash.Value, name: "GetAge", document: GetAgeQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatName(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatOwner(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetAge GraphQL operation
    /// <code>
    /// query GetAge($name: String!, $owner: String!) {
    ///   repository(name: $name, owner: $owner) {
    ///     __typename
    ///     updatedAt
    ///     pushedAt
    ///     ... on Repository {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetAgeQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetAgeResult>> ExecuteAsync(global::System.String name, global::System.String owner, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetAgeResult>> Watch(global::System.String name, global::System.String owner, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetRepo GraphQL operation
    /// <code>
    /// query GetRepo($name: String!, $owner: String!) {
    ///   repository(name: $name, owner: $owner) {
    ///     __typename
    ///     discussions(first: 100, orderBy: { field: UPDATED_AT, direction: DESC }) {
    ///       __typename
    ///       edges {
    ///         __typename
    ///         node {
    ///           __typename
    ///           number
    ///           answer {
    ///             __typename
    ///             isAnswer
    ///             ... on DiscussionComment {
    ///               id
    ///             }
    ///           }
    ///           ... on Discussion {
    ///             id
    ///           }
    ///         }
    ///       }
    ///       totalCount
    ///     }
    ///     isSecurityPolicyEnabled
    ///     securityPolicyUrl
    ///     hasVulnerabilityAlertsEnabled
    ///     vulnerabilityAlerts {
    ///       __typename
    ///       totalCount
    ///     }
    ///     releases(first: 1) {
    ///       __typename
    ///       edges {
    ///         __typename
    ///         node {
    ///           __typename
    ///           name
    ///           url
    ///           ... on Release {
    ///             id
    ///           }
    ///         }
    ///       }
    ///     }
    ///     diskUsage
    ///     updatedAt
    ///     pushedAt
    ///     repositoryTopics {
    ///       __typename
    ///       totalCount
    ///     }
    ///     codeOfConduct {
    ///       __typename
    ///       url
    ///       name
    ///       ... on CodeOfConduct {
    ///         id
    ///       }
    ///     }
    ///     codeowners {
    ///       __typename
    ///       errors {
    ///         __typename
    ///         kind
    ///       }
    ///     }
    ///     defaultBranchRef {
    ///       __typename
    ///       name
    ///       target {
    ///         __typename
    ///         commitResourcePath
    ///         ... on Blob {
    ///           id
    ///         }
    ///         ... on Commit {
    ///           id
    ///         }
    ///         ... on Tag {
    ///           id
    ///         }
    ///         ... on Tree {
    ///           id
    ///         }
    ///       }
    ///       branchProtectionRule {
    ///         __typename
    ///         allowsForcePushes
    ///         dismissesStaleReviews
    ///         lockBranch
    ///         requiresApprovingReviews
    ///         requiresConversationResolution
    ///         requiresStatusChecks
    ///         requiresStrictStatusChecks
    ///         ... on BranchProtectionRule {
    ///           id
    ///         }
    ///       }
    ///       ... on Ref {
    ///         id
    ///       }
    ///     }
    ///     description
    ///     hasDiscussionsEnabled
    ///     hasIssuesEnabled
    ///     isArchived
    ///     isEmpty
    ///     isLocked
    ///     issueTemplates {
    ///       __typename
    ///       name
    ///       filename
    ///     }
    ///     licenseInfo {
    ///       __typename
    ///       name
    ///       url
    ///       ... on License {
    ///         id
    ///       }
    ///     }
    ///     openGraphImageUrl
    ///     primaryLanguage {
    ///       __typename
    ///       name
    ///       color
    ///       ... on Language {
    ///         id
    ///       }
    ///     }
    ///     pullRequestTemplates {
    ///       __typename
    ///       filename
    ///     }
    ///     url
    ///     pullRequests(first: 10, states: OPEN) {
    ///       __typename
    ///       nodes {
    ///         __typename
    ///         createdAt
    ///         ... on PullRequest {
    ///           id
    ///         }
    ///       }
    ///     }
    ///     issues(first: 100, states: OPEN) {
    ///       __typename
    ///       edges {
    ///         __typename
    ///         node {
    ///           __typename
    ///           labels {
    ///             __typename
    ///             totalCount
    ///           }
    ///           number
    ///           createdAt
    ///           ... on Issue {
    ///             id
    ///           }
    ///         }
    ///       }
    ///     }
    ///     ... on Repository {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetRepoQueryDocument : global::StrawberryShake.IDocument
    {
        private GetRepoQueryDocument()
        {
        }

        public static GetRepoQueryDocument Instance { get; } = new GetRepoQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x28, 0x24, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x28, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x24, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x20, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x3a, 0x20, 0x24, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x64, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x28, 0x66, 0x69, 0x72, 0x73, 0x74, 0x3a, 0x20, 0x31, 0x30, 0x30, 0x2c, 0x20, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x42, 0x79, 0x3a, 0x20, 0x7b, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x3a, 0x20, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x41, 0x54, 0x2c, 0x20, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x44, 0x45, 0x53, 0x43, 0x20, 0x7d, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x65, 0x64, 0x67, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x61, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x69, 0x73, 0x41, 0x6e, 0x73, 0x77, 0x65, 0x72, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x7d, 0x20, 0x69, 0x73, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x20, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x55, 0x72, 0x6c, 0x20, 0x68, 0x61, 0x73, 0x56, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x20, 0x76, 0x75, 0x6c, 0x6e, 0x65, 0x72, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x41, 0x6c, 0x65, 0x72, 0x74, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x7d, 0x20, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x28, 0x66, 0x69, 0x72, 0x73, 0x74, 0x3a, 0x20, 0x31, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x65, 0x64, 0x67, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x75, 0x72, 0x6c, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x64, 0x69, 0x73, 0x6b, 0x55, 0x73, 0x61, 0x67, 0x65, 0x20, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x20, 0x70, 0x75, 0x73, 0x68, 0x65, 0x64, 0x41, 0x74, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x7d, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x43, 0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x75, 0x72, 0x6c, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x64, 0x65, 0x4f, 0x66, 0x43, 0x6f, 0x6e, 0x64, 0x75, 0x63, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x63, 0x6f, 0x64, 0x65, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6b, 0x69, 0x6e, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x52, 0x65, 0x66, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x61, 0x74, 0x68, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x42, 0x6c, 0x6f, 0x62, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x54, 0x61, 0x67, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x54, 0x72, 0x65, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x62, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x73, 0x46, 0x6f, 0x72, 0x63, 0x65, 0x50, 0x75, 0x73, 0x68, 0x65, 0x73, 0x20, 0x64, 0x69, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x65, 0x73, 0x53, 0x74, 0x61, 0x6c, 0x65, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x20, 0x6c, 0x6f, 0x63, 0x6b, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x41, 0x70, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x76, 0x69, 0x65, 0x77, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x43, 0x6f, 0x6e, 0x76, 0x65, 0x72, 0x73, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x73, 0x53, 0x74, 0x72, 0x69, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x75, 0x6c, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x66, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x68, 0x61, 0x73, 0x44, 0x69, 0x73, 0x63, 0x75, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x20, 0x68, 0x61, 0x73, 0x49, 0x73, 0x73, 0x75, 0x65, 0x73, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x20, 0x69, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x20, 0x69, 0x73, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x20, 0x69, 0x73, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x20, 0x69, 0x73, 0x73, 0x75, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x7d, 0x20, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x75, 0x72, 0x6c, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x6f, 0x70, 0x65, 0x6e, 0x47, 0x72, 0x61, 0x70, 0x68, 0x49, 0x6d, 0x61, 0x67, 0x65, 0x55, 0x72, 0x6c, 0x20, 0x70, 0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x6f, 0x6c, 0x6f, 0x72, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x70, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x7d, 0x20, 0x75, 0x72, 0x6c, 0x20, 0x70, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x28, 0x66, 0x69, 0x72, 0x73, 0x74, 0x3a, 0x20, 0x31, 0x30, 0x2c, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x3a, 0x20, 0x4f, 0x50, 0x45, 0x4e, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x50, 0x75, 0x6c, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x69, 0x73, 0x73, 0x75, 0x65, 0x73, 0x28, 0x66, 0x69, 0x72, 0x73, 0x74, 0x3a, 0x20, 0x31, 0x30, 0x30, 0x2c, 0x20, 0x73, 0x74, 0x61, 0x74, 0x65, 0x73, 0x3a, 0x20, 0x4f, 0x50, 0x45, 0x4e, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x65, 0x64, 0x67, 0x65, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6e, 0x6f, 0x64, 0x65, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x20, 0x7d, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x20, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x49, 0x73, 0x73, 0x75, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "b6d004fea5ce72bd9d06e16b1674aa54");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetRepo GraphQL operation
    /// <code>
    /// query GetRepo($name: String!, $owner: String!) {
    ///   repository(name: $name, owner: $owner) {
    ///     __typename
    ///     discussions(first: 100, orderBy: { field: UPDATED_AT, direction: DESC }) {
    ///       __typename
    ///       edges {
    ///         __typename
    ///         node {
    ///           __typename
    ///           number
    ///           answer {
    ///             __typename
    ///             isAnswer
    ///             ... on DiscussionComment {
    ///               id
    ///             }
    ///           }
    ///           ... on Discussion {
    ///             id
    ///           }
    ///         }
    ///       }
    ///       totalCount
    ///     }
    ///     isSecurityPolicyEnabled
    ///     securityPolicyUrl
    ///     hasVulnerabilityAlertsEnabled
    ///     vulnerabilityAlerts {
    ///       __typename
    ///       totalCount
    ///     }
    ///     releases(first: 1) {
    ///       __typename
    ///       edges {
    ///         __typename
    ///         node {
    ///           __typename
    ///           name
    ///           url
    ///           ... on Release {
    ///             id
    ///           }
    ///         }
    ///       }
    ///     }
    ///     diskUsage
    ///     updatedAt
    ///     pushedAt
    ///     repositoryTopics {
    ///       __typename
    ///       totalCount
    ///     }
    ///     codeOfConduct {
    ///       __typename
    ///       url
    ///       name
    ///       ... on CodeOfConduct {
    ///         id
    ///       }
    ///     }
    ///     codeowners {
    ///       __typename
    ///       errors {
    ///         __typename
    ///         kind
    ///       }
    ///     }
    ///     defaultBranchRef {
    ///       __typename
    ///       name
    ///       target {
    ///         __typename
    ///         commitResourcePath
    ///         ... on Blob {
    ///           id
    ///         }
    ///         ... on Commit {
    ///           id
    ///         }
    ///         ... on Tag {
    ///           id
    ///         }
    ///         ... on Tree {
    ///           id
    ///         }
    ///       }
    ///       branchProtectionRule {
    ///         __typename
    ///         allowsForcePushes
    ///         dismissesStaleReviews
    ///         lockBranch
    ///         requiresApprovingReviews
    ///         requiresConversationResolution
    ///         requiresStatusChecks
    ///         requiresStrictStatusChecks
    ///         ... on BranchProtectionRule {
    ///           id
    ///         }
    ///       }
    ///       ... on Ref {
    ///         id
    ///       }
    ///     }
    ///     description
    ///     hasDiscussionsEnabled
    ///     hasIssuesEnabled
    ///     isArchived
    ///     isEmpty
    ///     isLocked
    ///     issueTemplates {
    ///       __typename
    ///       name
    ///       filename
    ///     }
    ///     licenseInfo {
    ///       __typename
    ///       name
    ///       url
    ///       ... on License {
    ///         id
    ///       }
    ///     }
    ///     openGraphImageUrl
    ///     primaryLanguage {
    ///       __typename
    ///       name
    ///       color
    ///       ... on Language {
    ///         id
    ///       }
    ///     }
    ///     pullRequestTemplates {
    ///       __typename
    ///       filename
    ///     }
    ///     url
    ///     pullRequests(first: 10, states: OPEN) {
    ///       __typename
    ///       nodes {
    ///         __typename
    ///         createdAt
    ///         ... on PullRequest {
    ///           id
    ///         }
    ///       }
    ///     }
    ///     issues(first: 100, states: OPEN) {
    ///       __typename
    ///       edges {
    ///         __typename
    ///         node {
    ///           __typename
    ///           labels {
    ///             __typename
    ///             totalCount
    ///           }
    ///           number
    ///           createdAt
    ///           ... on Issue {
    ///             id
    ///           }
    ///         }
    ///       }
    ///     }
    ///     ... on Repository {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetRepoQuery : global::RepositoryAnalysis.Internal.GraphQL.IGetRepoQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetRepoResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public GetRepoQuery(global::StrawberryShake.IOperationExecutor<IGetRepoResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetRepoResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetRepoResult>> ExecuteAsync(global::System.String name, global::System.String owner, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(name, owner);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetRepoResult>> Watch(global::System.String name, global::System.String owner, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(name, owner);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String name, global::System.String owner)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("name", FormatName(name));
            variables.Add("owner", FormatOwner(owner));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetRepoQueryDocument.Instance.Hash.Value, name: "GetRepo", document: GetRepoQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatName(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatOwner(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetRepo GraphQL operation
    /// <code>
    /// query GetRepo($name: String!, $owner: String!) {
    ///   repository(name: $name, owner: $owner) {
    ///     __typename
    ///     discussions(first: 100, orderBy: { field: UPDATED_AT, direction: DESC }) {
    ///       __typename
    ///       edges {
    ///         __typename
    ///         node {
    ///           __typename
    ///           number
    ///           answer {
    ///             __typename
    ///             isAnswer
    ///             ... on DiscussionComment {
    ///               id
    ///             }
    ///           }
    ///           ... on Discussion {
    ///             id
    ///           }
    ///         }
    ///       }
    ///       totalCount
    ///     }
    ///     isSecurityPolicyEnabled
    ///     securityPolicyUrl
    ///     hasVulnerabilityAlertsEnabled
    ///     vulnerabilityAlerts {
    ///       __typename
    ///       totalCount
    ///     }
    ///     releases(first: 1) {
    ///       __typename
    ///       edges {
    ///         __typename
    ///         node {
    ///           __typename
    ///           name
    ///           url
    ///           ... on Release {
    ///             id
    ///           }
    ///         }
    ///       }
    ///     }
    ///     diskUsage
    ///     updatedAt
    ///     pushedAt
    ///     repositoryTopics {
    ///       __typename
    ///       totalCount
    ///     }
    ///     codeOfConduct {
    ///       __typename
    ///       url
    ///       name
    ///       ... on CodeOfConduct {
    ///         id
    ///       }
    ///     }
    ///     codeowners {
    ///       __typename
    ///       errors {
    ///         __typename
    ///         kind
    ///       }
    ///     }
    ///     defaultBranchRef {
    ///       __typename
    ///       name
    ///       target {
    ///         __typename
    ///         commitResourcePath
    ///         ... on Blob {
    ///           id
    ///         }
    ///         ... on Commit {
    ///           id
    ///         }
    ///         ... on Tag {
    ///           id
    ///         }
    ///         ... on Tree {
    ///           id
    ///         }
    ///       }
    ///       branchProtectionRule {
    ///         __typename
    ///         allowsForcePushes
    ///         dismissesStaleReviews
    ///         lockBranch
    ///         requiresApprovingReviews
    ///         requiresConversationResolution
    ///         requiresStatusChecks
    ///         requiresStrictStatusChecks
    ///         ... on BranchProtectionRule {
    ///           id
    ///         }
    ///       }
    ///       ... on Ref {
    ///         id
    ///       }
    ///     }
    ///     description
    ///     hasDiscussionsEnabled
    ///     hasIssuesEnabled
    ///     isArchived
    ///     isEmpty
    ///     isLocked
    ///     issueTemplates {
    ///       __typename
    ///       name
    ///       filename
    ///     }
    ///     licenseInfo {
    ///       __typename
    ///       name
    ///       url
    ///       ... on License {
    ///         id
    ///       }
    ///     }
    ///     openGraphImageUrl
    ///     primaryLanguage {
    ///       __typename
    ///       name
    ///       color
    ///       ... on Language {
    ///         id
    ///       }
    ///     }
    ///     pullRequestTemplates {
    ///       __typename
    ///       filename
    ///     }
    ///     url
    ///     pullRequests(first: 10, states: OPEN) {
    ///       __typename
    ///       nodes {
    ///         __typename
    ///         createdAt
    ///         ... on PullRequest {
    ///           id
    ///         }
    ///       }
    ///     }
    ///     issues(first: 100, states: OPEN) {
    ///       __typename
    ///       edges {
    ///         __typename
    ///         node {
    ///           __typename
    ///           labels {
    ///             __typename
    ///             totalCount
    ///           }
    ///           number
    ///           createdAt
    ///           ... on Issue {
    ///             id
    ///           }
    ///         }
    ///       }
    ///     }
    ///     ... on Repository {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetRepoQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetRepoResult>> ExecuteAsync(global::System.String name, global::System.String owner, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetRepoResult>> Watch(global::System.String name, global::System.String owner, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the operation service of the GetFile GraphQL operation
    /// <code>
    /// query GetFile($name: String!, $owner: String!, $expression: String!) {
    ///   repository(name: $name, owner: $owner) {
    ///     __typename
    ///     file: object(expression: $expression) {
    ///       __typename
    ///       ... on Blob {
    ///         text
    ///       }
    ///       ... on Blob {
    ///         id
    ///       }
    ///       ... on Commit {
    ///         id
    ///       }
    ///       ... on Tag {
    ///         id
    ///       }
    ///       ... on Tree {
    ///         id
    ///       }
    ///     }
    ///     ... on Repository {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetFileQueryDocument : global::StrawberryShake.IDocument
    {
        private GetFileQueryDocument()
        {
        }

        public static GetFileQueryDocument Instance { get; } = new GetFileQueryDocument();
        public global::StrawberryShake.OperationKind Kind => global::StrawberryShake.OperationKind.Query;
        public global::System.ReadOnlySpan<global::System.Byte> Body => new global::System.Byte[]{0x71, 0x75, 0x65, 0x72, 0x79, 0x20, 0x47, 0x65, 0x74, 0x46, 0x69, 0x6c, 0x65, 0x28, 0x24, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x2c, 0x20, 0x24, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x21, 0x29, 0x20, 0x7b, 0x20, 0x72, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x28, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x20, 0x24, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x20, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x3a, 0x20, 0x24, 0x6f, 0x77, 0x6e, 0x65, 0x72, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x66, 0x69, 0x6c, 0x65, 0x3a, 0x20, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x28, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x3a, 0x20, 0x24, 0x65, 0x78, 0x70, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x29, 0x20, 0x7b, 0x20, 0x5f, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x42, 0x6c, 0x6f, 0x62, 0x20, 0x7b, 0x20, 0x74, 0x65, 0x78, 0x74, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x42, 0x6c, 0x6f, 0x62, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x54, 0x61, 0x67, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x54, 0x72, 0x65, 0x65, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x2e, 0x2e, 0x2e, 0x20, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x6f, 0x72, 0x79, 0x20, 0x7b, 0x20, 0x69, 0x64, 0x20, 0x7d, 0x20, 0x7d, 0x20, 0x7d};
        public global::StrawberryShake.DocumentHash Hash { get; } = new global::StrawberryShake.DocumentHash("md5Hash", "315cd7fc24b35adc6e04256976af86ee");
        public override global::System.String ToString()
        {
#if NETSTANDARD2_0
        return global::System.Text.Encoding.UTF8.GetString(Body.ToArray());
#else
            return global::System.Text.Encoding.UTF8.GetString(Body);
#endif
        }
    }

    /// <summary>
    /// Represents the operation service of the GetFile GraphQL operation
    /// <code>
    /// query GetFile($name: String!, $owner: String!, $expression: String!) {
    ///   repository(name: $name, owner: $owner) {
    ///     __typename
    ///     file: object(expression: $expression) {
    ///       __typename
    ///       ... on Blob {
    ///         text
    ///       }
    ///       ... on Blob {
    ///         id
    ///       }
    ///       ... on Commit {
    ///         id
    ///       }
    ///       ... on Tag {
    ///         id
    ///       }
    ///       ... on Tree {
    ///         id
    ///       }
    ///     }
    ///     ... on Repository {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetFileQuery : global::RepositoryAnalysis.Internal.GraphQL.IGetFileQuery
    {
        private readonly global::StrawberryShake.IOperationExecutor<IGetFileResult> _operationExecutor;
        private readonly global::StrawberryShake.Serialization.IInputValueFormatter _stringFormatter;
        public GetFileQuery(global::StrawberryShake.IOperationExecutor<IGetFileResult> operationExecutor, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _operationExecutor = operationExecutor ?? throw new global::System.ArgumentNullException(nameof(operationExecutor));
            _stringFormatter = serializerResolver.GetInputValueFormatter("String");
        }

        global::System.Type global::StrawberryShake.IOperationRequestFactory.ResultType => typeof(IGetFileResult);
        public async global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetFileResult>> ExecuteAsync(global::System.String name, global::System.String owner, global::System.String expression, global::System.Threading.CancellationToken cancellationToken = default)
        {
            var request = CreateRequest(name, owner, expression);
            return await _operationExecutor.ExecuteAsync(request, cancellationToken).ConfigureAwait(false);
        }

        public global::System.IObservable<global::StrawberryShake.IOperationResult<IGetFileResult>> Watch(global::System.String name, global::System.String owner, global::System.String expression, global::StrawberryShake.ExecutionStrategy? strategy = null)
        {
            var request = CreateRequest(name, owner, expression);
            return _operationExecutor.Watch(request, strategy);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.String name, global::System.String owner, global::System.String expression)
        {
            var variables = new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>();
            variables.Add("name", FormatName(name));
            variables.Add("owner", FormatOwner(owner));
            variables.Add("expression", FormatExpression(expression));
            return CreateRequest(variables);
        }

        private global::StrawberryShake.OperationRequest CreateRequest(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return new global::StrawberryShake.OperationRequest(id: GetFileQueryDocument.Instance.Hash.Value, name: "GetFile", document: GetFileQueryDocument.Instance, strategy: global::StrawberryShake.RequestStrategy.Default, variables: variables);
        }

        private global::System.Object? FormatName(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatOwner(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        private global::System.Object? FormatExpression(global::System.String value)
        {
            if (value is null)
            {
                throw new global::System.ArgumentNullException(nameof(value));
            }

            return _stringFormatter.Format(value);
        }

        global::StrawberryShake.OperationRequest global::StrawberryShake.IOperationRequestFactory.Create(global::System.Collections.Generic.IReadOnlyDictionary<global::System.String, global::System.Object?>? variables)
        {
            return CreateRequest(variables!);
        }
    }

    /// <summary>
    /// Represents the operation service of the GetFile GraphQL operation
    /// <code>
    /// query GetFile($name: String!, $owner: String!, $expression: String!) {
    ///   repository(name: $name, owner: $owner) {
    ///     __typename
    ///     file: object(expression: $expression) {
    ///       __typename
    ///       ... on Blob {
    ///         text
    ///       }
    ///       ... on Blob {
    ///         id
    ///       }
    ///       ... on Commit {
    ///         id
    ///       }
    ///       ... on Tag {
    ///         id
    ///       }
    ///       ... on Tree {
    ///         id
    ///       }
    ///     }
    ///     ... on Repository {
    ///       id
    ///     }
    ///   }
    /// }
    /// </code>
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGetFileQuery : global::StrawberryShake.IOperationRequestFactory
    {
        global::System.Threading.Tasks.Task<global::StrawberryShake.IOperationResult<IGetFileResult>> ExecuteAsync(global::System.String name, global::System.String owner, global::System.String expression, global::System.Threading.CancellationToken cancellationToken = default);
        global::System.IObservable<global::StrawberryShake.IOperationResult<IGetFileResult>> Watch(global::System.String name, global::System.String owner, global::System.String expression, global::StrawberryShake.ExecutionStrategy? strategy = null);
    }

    /// <summary>
    /// Represents the GithubClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GithubClient : global::RepositoryAnalysis.Internal.GraphQL.IGithubClient
    {
        private readonly global::RepositoryAnalysis.Internal.GraphQL.IGetAgeQuery _getAge;
        private readonly global::RepositoryAnalysis.Internal.GraphQL.IGetRepoQuery _getRepo;
        private readonly global::RepositoryAnalysis.Internal.GraphQL.IGetFileQuery _getFile;
        public GithubClient(global::RepositoryAnalysis.Internal.GraphQL.IGetAgeQuery getAge, global::RepositoryAnalysis.Internal.GraphQL.IGetRepoQuery getRepo, global::RepositoryAnalysis.Internal.GraphQL.IGetFileQuery getFile)
        {
            _getAge = getAge ?? throw new global::System.ArgumentNullException(nameof(getAge));
            _getRepo = getRepo ?? throw new global::System.ArgumentNullException(nameof(getRepo));
            _getFile = getFile ?? throw new global::System.ArgumentNullException(nameof(getFile));
        }

        public static global::System.String ClientName => "GithubClient";
        public global::RepositoryAnalysis.Internal.GraphQL.IGetAgeQuery GetAge => _getAge;
        public global::RepositoryAnalysis.Internal.GraphQL.IGetRepoQuery GetRepo => _getRepo;
        public global::RepositoryAnalysis.Internal.GraphQL.IGetFileQuery GetFile => _getFile;
    }

    /// <summary>
    /// Represents the GithubClient GraphQL client
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial interface IGithubClient
    {
        global::RepositoryAnalysis.Internal.GraphQL.IGetAgeQuery GetAge { get; }

        global::RepositoryAnalysis.Internal.GraphQL.IGetRepoQuery GetRepo { get; }

        global::RepositoryAnalysis.Internal.GraphQL.IGetFileQuery GetFile { get; }
    }
}

namespace RepositoryAnalysis.Internal.GraphQL.State
{
    ///<summary>A repository contains the content for a project.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class RepositoryEntity
    {
        public RepositoryEntity(global::System.DateTimeOffset updatedAt = default !, global::System.DateTimeOffset? pushedAt = default !, global::RepositoryAnalysis.Internal.GraphQL.State.DiscussionConnectionData discussions = default !, global::System.Boolean? isSecurityPolicyEnabled = default !, global::System.Uri? securityPolicyUrl = default !, global::System.Boolean hasVulnerabilityAlertsEnabled = default !, global::RepositoryAnalysis.Internal.GraphQL.State.RepositoryVulnerabilityAlertConnectionData? vulnerabilityAlerts = default !, global::RepositoryAnalysis.Internal.GraphQL.State.ReleaseConnectionData releases = default !, global::System.Int32? diskUsage = default !, global::RepositoryAnalysis.Internal.GraphQL.State.RepositoryTopicConnectionData repositoryTopics = default !, global::StrawberryShake.EntityId? codeOfConduct = default !, global::RepositoryAnalysis.Internal.GraphQL.State.RepositoryCodeownersData? codeowners = default !, global::StrawberryShake.EntityId? defaultBranchRef = default !, global::System.String? description = default !, global::System.Boolean hasDiscussionsEnabled = default !, global::System.Boolean hasIssuesEnabled = default !, global::System.Boolean isArchived = default !, global::System.Boolean isEmpty = default !, global::System.Boolean isLocked = default !, global::System.Collections.Generic.IReadOnlyList<global::RepositoryAnalysis.Internal.GraphQL.State.IssueTemplateData>? issueTemplates = default !, global::StrawberryShake.EntityId? licenseInfo = default !, global::System.Uri openGraphImageUrl = default !, global::StrawberryShake.EntityId? primaryLanguage = default !, global::System.Collections.Generic.IReadOnlyList<global::RepositoryAnalysis.Internal.GraphQL.State.PullRequestTemplateData>? pullRequestTemplates = default !, global::System.Uri url = default !, global::RepositoryAnalysis.Internal.GraphQL.State.PullRequestConnectionData pullRequests = default !, global::RepositoryAnalysis.Internal.GraphQL.State.IssueConnectionData issues = default !, global::StrawberryShake.EntityId? file = default !)
        {
            UpdatedAt = updatedAt;
            PushedAt = pushedAt;
            Discussions = discussions;
            IsSecurityPolicyEnabled = isSecurityPolicyEnabled;
            SecurityPolicyUrl = securityPolicyUrl;
            HasVulnerabilityAlertsEnabled = hasVulnerabilityAlertsEnabled;
            VulnerabilityAlerts = vulnerabilityAlerts;
            Releases = releases;
            DiskUsage = diskUsage;
            RepositoryTopics = repositoryTopics;
            CodeOfConduct = codeOfConduct;
            Codeowners = codeowners;
            DefaultBranchRef = defaultBranchRef;
            Description = description;
            HasDiscussionsEnabled = hasDiscussionsEnabled;
            HasIssuesEnabled = hasIssuesEnabled;
            IsArchived = isArchived;
            IsEmpty = isEmpty;
            IsLocked = isLocked;
            IssueTemplates = issueTemplates;
            LicenseInfo = licenseInfo;
            OpenGraphImageUrl = openGraphImageUrl;
            PrimaryLanguage = primaryLanguage;
            PullRequestTemplates = pullRequestTemplates;
            Url = url;
            PullRequests = pullRequests;
            Issues = issues;
            File = file;
        }

        ///<summary>Identifies the date and time when the object was last updated.</summary>
        public global::System.DateTimeOffset UpdatedAt { get; }

        ///<summary>Identifies when the repository was last pushed to.</summary>
        public global::System.DateTimeOffset? PushedAt { get; }

        ///<summary>A list of discussions that have been opened in the repository.</summary>
        public global::RepositoryAnalysis.Internal.GraphQL.State.DiscussionConnectionData Discussions { get; }

        ///<summary>Returns true if this repository has a security policy</summary>
        public global::System.Boolean? IsSecurityPolicyEnabled { get; }

        ///<summary>The security policy URL.</summary>
        public global::System.Uri? SecurityPolicyUrl { get; }

        ///<summary>Whether vulnerability alerts are enabled for the repository.</summary>
        public global::System.Boolean HasVulnerabilityAlertsEnabled { get; }

        ///<summary>A list of vulnerability alerts that are on this repository.</summary>
        public global::RepositoryAnalysis.Internal.GraphQL.State.RepositoryVulnerabilityAlertConnectionData? VulnerabilityAlerts { get; }

        ///<summary>List of releases which are dependent on this repository.</summary>
        public global::RepositoryAnalysis.Internal.GraphQL.State.ReleaseConnectionData Releases { get; }

        ///<summary>The number of kilobytes this repository occupies on disk.</summary>
        public global::System.Int32? DiskUsage { get; }

        ///<summary>A list of applied repository-topic associations for this repository.</summary>
        public global::RepositoryAnalysis.Internal.GraphQL.State.RepositoryTopicConnectionData RepositoryTopics { get; }

        ///<summary>Returns the code of conduct for this repository</summary>
        public global::StrawberryShake.EntityId? CodeOfConduct { get; }

        ///<summary>Information extracted from the repository's `CODEOWNERS` file.</summary>
        public global::RepositoryAnalysis.Internal.GraphQL.State.RepositoryCodeownersData? Codeowners { get; }

        ///<summary>The Ref associated with the repository's default branch.</summary>
        public global::StrawberryShake.EntityId? DefaultBranchRef { get; }

        ///<summary>The description of the repository.</summary>
        public global::System.String? Description { get; }

        ///<summary>Indicates if the repository has the Discussions feature enabled.</summary>
        public global::System.Boolean HasDiscussionsEnabled { get; }

        ///<summary>Indicates if the repository has issues feature enabled.</summary>
        public global::System.Boolean HasIssuesEnabled { get; }

        ///<summary>Indicates if the repository is unmaintained.</summary>
        public global::System.Boolean IsArchived { get; }

        ///<summary>Returns whether or not this repository is empty.</summary>
        public global::System.Boolean IsEmpty { get; }

        ///<summary>Indicates if the repository has been locked or not.</summary>
        public global::System.Boolean IsLocked { get; }

        ///<summary>Returns a list of issue templates associated to the repository</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::RepositoryAnalysis.Internal.GraphQL.State.IssueTemplateData>? IssueTemplates { get; }

        ///<summary>The license associated with the repository</summary>
        public global::StrawberryShake.EntityId? LicenseInfo { get; }

        ///<summary>The image used to represent this repository in Open Graph data.</summary>
        public global::System.Uri OpenGraphImageUrl { get; }

        ///<summary>The primary language of the repository's code.</summary>
        public global::StrawberryShake.EntityId? PrimaryLanguage { get; }

        ///<summary>Returns a list of pull request templates associated to the repository</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::RepositoryAnalysis.Internal.GraphQL.State.PullRequestTemplateData>? PullRequestTemplates { get; }

        ///<summary>The HTTP URL for this repository</summary>
        public global::System.Uri Url { get; }

        ///<summary>A list of pull requests that have been opened in the repository.</summary>
        public global::RepositoryAnalysis.Internal.GraphQL.State.PullRequestConnectionData PullRequests { get; }

        ///<summary>A list of issues that have been opened in the repository.</summary>
        public global::RepositoryAnalysis.Internal.GraphQL.State.IssueConnectionData Issues { get; }

        ///<summary>A Git object in the repository</summary>
        public global::StrawberryShake.EntityId? File { get; }
    }

    ///<summary>The Code of Conduct for a repository</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class CodeOfConductEntity
    {
        public CodeOfConductEntity(global::System.Uri? url = default !, global::System.String name = default !)
        {
            Url = url;
            Name = name;
        }

        ///<summary>The HTTP URL for this Code of Conduct</summary>
        public global::System.Uri? Url { get; }

        ///<summary>The formal name of the Code of Conduct</summary>
        public global::System.String Name { get; }
    }

    ///<summary>Represents a Git reference.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class RefEntity
    {
        public RefEntity(global::System.String name = default !, global::StrawberryShake.EntityId? target = default !, global::StrawberryShake.EntityId? branchProtectionRule = default !)
        {
            Name = name;
            Target = target;
            BranchProtectionRule = branchProtectionRule;
        }

        ///<summary>The ref name.</summary>
        public global::System.String Name { get; }

        ///<summary>The object the ref points to. Returns null when object does not exist.</summary>
        public global::StrawberryShake.EntityId? Target { get; }

        ///<summary>Branch protection rules for this ref</summary>
        public global::StrawberryShake.EntityId? BranchProtectionRule { get; }
    }

    ///<summary>A repository's open source license</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class LicenseEntity
    {
        public LicenseEntity(global::System.String name = default !, global::System.Uri? url = default !)
        {
            Name = name;
            Url = url;
        }

        ///<summary>The license full name specified by &lt;https://spdx.org/licenses&gt;</summary>
        public global::System.String Name { get; }

        ///<summary>URL to the license on &lt;https://choosealicense.com&gt;</summary>
        public global::System.Uri? Url { get; }
    }

    ///<summary>Represents a given language found in repositories.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class LanguageEntity
    {
        public LanguageEntity(global::System.String name = default !, global::System.String? color = default !)
        {
            Name = name;
            Color = color;
        }

        ///<summary>The name of the current language.</summary>
        public global::System.String Name { get; }

        ///<summary>The color defined for the current language.</summary>
        public global::System.String? Color { get; }
    }

    ///<summary>Represents a Git blob.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class BlobEntity
    {
        public BlobEntity(global::System.Uri commitResourcePath = default !, global::System.String? text = default !)
        {
            CommitResourcePath = commitResourcePath;
            Text = text;
        }

        ///<summary>The HTTP path for this Git object</summary>
        public global::System.Uri CommitResourcePath { get; }

        ///<summary>UTF8 text data or null if the Blob is binary</summary>
        public global::System.String? Text { get; }
    }

    ///<summary>Represents a Git commit.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class CommitEntity
    {
        public CommitEntity(global::System.Uri commitResourcePath = default !)
        {
            CommitResourcePath = commitResourcePath;
        }

        ///<summary>The HTTP path for this Git object</summary>
        public global::System.Uri CommitResourcePath { get; }
    }

    ///<summary>Represents a Git tag.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class TagEntity
    {
        public TagEntity(global::System.Uri commitResourcePath = default !)
        {
            CommitResourcePath = commitResourcePath;
        }

        ///<summary>The HTTP path for this Git object</summary>
        public global::System.Uri CommitResourcePath { get; }
    }

    ///<summary>Represents a Git tree.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class TreeEntity
    {
        public TreeEntity(global::System.Uri commitResourcePath = default !)
        {
            CommitResourcePath = commitResourcePath;
        }

        ///<summary>The HTTP path for this Git object</summary>
        public global::System.Uri CommitResourcePath { get; }
    }

    ///<summary>A branch protection rule.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class BranchProtectionRuleEntity
    {
        public BranchProtectionRuleEntity(global::System.Boolean allowsForcePushes = default !, global::System.Boolean dismissesStaleReviews = default !, global::System.Boolean lockBranch = default !, global::System.Boolean requiresApprovingReviews = default !, global::System.Boolean requiresConversationResolution = default !, global::System.Boolean requiresStatusChecks = default !, global::System.Boolean requiresStrictStatusChecks = default !)
        {
            AllowsForcePushes = allowsForcePushes;
            DismissesStaleReviews = dismissesStaleReviews;
            LockBranch = lockBranch;
            RequiresApprovingReviews = requiresApprovingReviews;
            RequiresConversationResolution = requiresConversationResolution;
            RequiresStatusChecks = requiresStatusChecks;
            RequiresStrictStatusChecks = requiresStrictStatusChecks;
        }

        ///<summary>Are force pushes allowed on this branch.</summary>
        public global::System.Boolean AllowsForcePushes { get; }

        ///<summary>Will new commits pushed to matching branches dismiss pull request review approvals.</summary>
        public global::System.Boolean DismissesStaleReviews { get; }

        ///<summary>Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.</summary>
        public global::System.Boolean LockBranch { get; }

        ///<summary>Are approving reviews required to update matching branches.</summary>
        public global::System.Boolean RequiresApprovingReviews { get; }

        ///<summary>Are conversations required to be resolved before merging.</summary>
        public global::System.Boolean RequiresConversationResolution { get; }

        ///<summary>Are status checks required to update matching branches.</summary>
        public global::System.Boolean RequiresStatusChecks { get; }

        ///<summary>Are branches required to be up to date before merging.</summary>
        public global::System.Boolean RequiresStrictStatusChecks { get; }
    }

    ///<summary>A repository pull request.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class PullRequestEntity
    {
        public PullRequestEntity(global::System.DateTimeOffset createdAt = default !)
        {
            CreatedAt = createdAt;
        }

        ///<summary>Identifies the date and time when the object was created.</summary>
        public global::System.DateTimeOffset CreatedAt { get; }
    }

    ///<summary>A discussion in a repository.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class DiscussionEntity
    {
        public DiscussionEntity(global::System.Int32 number = default !, global::StrawberryShake.EntityId? answer = default !)
        {
            Number = number;
            Answer = answer;
        }

        ///<summary>The number identifying this discussion within the repository.</summary>
        public global::System.Int32 Number { get; }

        ///<summary>The comment chosen as this discussion's answer, if any.</summary>
        public global::StrawberryShake.EntityId? Answer { get; }
    }

    ///<summary>A release contains the content for a release.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class ReleaseEntity
    {
        public ReleaseEntity(global::System.String? name = default !, global::System.Uri url = default !)
        {
            Name = name;
            Url = url;
        }

        ///<summary>The title of the release.</summary>
        public global::System.String? Name { get; }

        ///<summary>The HTTP URL for this issue</summary>
        public global::System.Uri Url { get; }
    }

    ///<summary>An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class IssueEntity
    {
        public IssueEntity(global::RepositoryAnalysis.Internal.GraphQL.State.LabelConnectionData? labels = default !, global::System.Int32 number = default !, global::System.DateTimeOffset createdAt = default !)
        {
            Labels = labels;
            Number = number;
            CreatedAt = createdAt;
        }

        ///<summary>A list of labels associated with the object.</summary>
        public global::RepositoryAnalysis.Internal.GraphQL.State.LabelConnectionData? Labels { get; }

        ///<summary>Identifies the issue number.</summary>
        public global::System.Int32 Number { get; }

        ///<summary>Identifies the date and time when the object was created.</summary>
        public global::System.DateTimeOffset CreatedAt { get; }
    }

    ///<summary>A comment on a discussion.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class DiscussionCommentEntity
    {
        public DiscussionCommentEntity(global::System.Boolean isAnswer = default !)
        {
            IsAnswer = isAnswer;
        }

        ///<summary>Has this comment been chosen as the answer of its discussion?</summary>
        public global::System.Boolean IsAnswer { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetAgeResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::RepositoryAnalysis.Internal.GraphQL.GetAgeResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.RepositoryEntity, GetAge_Repository_Repository> _getAge_Repository_RepositoryFromRepositoryEntityMapper;
        public GetAgeResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.RepositoryEntity, GetAge_Repository_Repository> getAge_Repository_RepositoryFromRepositoryEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getAge_Repository_RepositoryFromRepositoryEntityMapper = getAge_Repository_RepositoryFromRepositoryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getAge_Repository_RepositoryFromRepositoryEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::RepositoryAnalysis.Internal.GraphQL.IGetAgeResult);
        public GetAgeResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetAgeResultInfo info)
            {
                return new GetAgeResult(MapIGetAge_Repository(info.Repository, snapshot));
            }

            throw new global::System.ArgumentException("GetAgeResultInfo expected.");
        }

        private global::RepositoryAnalysis.Internal.GraphQL.IGetAge_Repository? MapIGetAge_Repository(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Repository", global::System.StringComparison.Ordinal))
            {
                return _getAge_Repository_RepositoryFromRepositoryEntityMapper.Map(snapshot.GetEntity<global::RepositoryAnalysis.Internal.GraphQL.State.RepositoryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetAgeResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetAgeResultInfo(global::StrawberryShake.EntityId? repository, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Repository = repository;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Lookup a given repository by the owner and repository name.
        /// </summary>
        public global::StrawberryShake.EntityId? Repository { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetAgeResultInfo(Repository, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetAge_Repository_RepositoryFromRepositoryEntityMapper : global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.RepositoryEntity, GetAge_Repository_Repository>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetAge_Repository_RepositoryFromRepositoryEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetAge_Repository_Repository Map(global::RepositoryAnalysis.Internal.GraphQL.State.RepositoryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetAge_Repository_Repository(entity.UpdatedAt, entity.PushedAt);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetRepoResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::RepositoryAnalysis.Internal.GraphQL.GetRepoResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.RepositoryEntity, GetRepo_Repository_Repository> _getRepo_Repository_RepositoryFromRepositoryEntityMapper;
        public GetRepoResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.RepositoryEntity, GetRepo_Repository_Repository> getRepo_Repository_RepositoryFromRepositoryEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getRepo_Repository_RepositoryFromRepositoryEntityMapper = getRepo_Repository_RepositoryFromRepositoryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getRepo_Repository_RepositoryFromRepositoryEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::RepositoryAnalysis.Internal.GraphQL.IGetRepoResult);
        public GetRepoResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetRepoResultInfo info)
            {
                return new GetRepoResult(MapIGetRepo_Repository(info.Repository, snapshot));
            }

            throw new global::System.ArgumentException("GetRepoResultInfo expected.");
        }

        private global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository? MapIGetRepo_Repository(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Repository", global::System.StringComparison.Ordinal))
            {
                return _getRepo_Repository_RepositoryFromRepositoryEntityMapper.Map(snapshot.GetEntity<global::RepositoryAnalysis.Internal.GraphQL.State.RepositoryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetRepoResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetRepoResultInfo(global::StrawberryShake.EntityId? repository, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Repository = repository;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Lookup a given repository by the owner and repository name.
        /// </summary>
        public global::StrawberryShake.EntityId? Repository { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetRepoResultInfo(Repository, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetRepo_Repository_RepositoryFromRepositoryEntityMapper : global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.RepositoryEntity, GetRepo_Repository_Repository>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.DiscussionEntity, GetRepo_Repository_Discussions_Edges_Node_Discussion> _getRepo_Repository_Discussions_Edges_Node_DiscussionFromDiscussionEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.DiscussionCommentEntity, GetRepo_Repository_Discussions_Edges_Node_Answer_DiscussionComment> _getRepo_Repository_Discussions_Edges_Node_Answer_DiscussionCommentFromDiscussionCommentEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.ReleaseEntity, GetRepo_Repository_Releases_Edges_Node_Release> _getRepo_Repository_Releases_Edges_Node_ReleaseFromReleaseEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.CodeOfConductEntity, GetRepo_Repository_CodeOfConduct_CodeOfConduct> _getRepo_Repository_CodeOfConduct_CodeOfConductFromCodeOfConductEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.RefEntity, GetRepo_Repository_DefaultBranchRef_Ref> _getRepo_Repository_DefaultBranchRef_RefFromRefEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.BlobEntity, GetRepo_Repository_DefaultBranchRef_Target_Blob> _getRepo_Repository_DefaultBranchRef_Target_BlobFromBlobEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.CommitEntity, GetRepo_Repository_DefaultBranchRef_Target_Commit> _getRepo_Repository_DefaultBranchRef_Target_CommitFromCommitEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.TagEntity, GetRepo_Repository_DefaultBranchRef_Target_Tag> _getRepo_Repository_DefaultBranchRef_Target_TagFromTagEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.TreeEntity, GetRepo_Repository_DefaultBranchRef_Target_Tree> _getRepo_Repository_DefaultBranchRef_Target_TreeFromTreeEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.BranchProtectionRuleEntity, GetRepo_Repository_DefaultBranchRef_BranchProtectionRule_BranchProtectionRule> _getRepo_Repository_DefaultBranchRef_BranchProtectionRule_BranchProtectionRuleFromBranchProtectionRuleEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.LicenseEntity, GetRepo_Repository_LicenseInfo_License> _getRepo_Repository_LicenseInfo_LicenseFromLicenseEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.LanguageEntity, GetRepo_Repository_PrimaryLanguage_Language> _getRepo_Repository_PrimaryLanguage_LanguageFromLanguageEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.PullRequestEntity, GetRepo_Repository_PullRequests_Nodes_PullRequest> _getRepo_Repository_PullRequests_Nodes_PullRequestFromPullRequestEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.IssueEntity, GetRepo_Repository_Issues_Edges_Node_Issue> _getRepo_Repository_Issues_Edges_Node_IssueFromIssueEntityMapper;
        public GetRepo_Repository_RepositoryFromRepositoryEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.DiscussionEntity, GetRepo_Repository_Discussions_Edges_Node_Discussion> getRepo_Repository_Discussions_Edges_Node_DiscussionFromDiscussionEntityMapper, global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.DiscussionCommentEntity, GetRepo_Repository_Discussions_Edges_Node_Answer_DiscussionComment> getRepo_Repository_Discussions_Edges_Node_Answer_DiscussionCommentFromDiscussionCommentEntityMapper, global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.ReleaseEntity, GetRepo_Repository_Releases_Edges_Node_Release> getRepo_Repository_Releases_Edges_Node_ReleaseFromReleaseEntityMapper, global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.CodeOfConductEntity, GetRepo_Repository_CodeOfConduct_CodeOfConduct> getRepo_Repository_CodeOfConduct_CodeOfConductFromCodeOfConductEntityMapper, global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.RefEntity, GetRepo_Repository_DefaultBranchRef_Ref> getRepo_Repository_DefaultBranchRef_RefFromRefEntityMapper, global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.BlobEntity, GetRepo_Repository_DefaultBranchRef_Target_Blob> getRepo_Repository_DefaultBranchRef_Target_BlobFromBlobEntityMapper, global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.CommitEntity, GetRepo_Repository_DefaultBranchRef_Target_Commit> getRepo_Repository_DefaultBranchRef_Target_CommitFromCommitEntityMapper, global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.TagEntity, GetRepo_Repository_DefaultBranchRef_Target_Tag> getRepo_Repository_DefaultBranchRef_Target_TagFromTagEntityMapper, global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.TreeEntity, GetRepo_Repository_DefaultBranchRef_Target_Tree> getRepo_Repository_DefaultBranchRef_Target_TreeFromTreeEntityMapper, global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.BranchProtectionRuleEntity, GetRepo_Repository_DefaultBranchRef_BranchProtectionRule_BranchProtectionRule> getRepo_Repository_DefaultBranchRef_BranchProtectionRule_BranchProtectionRuleFromBranchProtectionRuleEntityMapper, global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.LicenseEntity, GetRepo_Repository_LicenseInfo_License> getRepo_Repository_LicenseInfo_LicenseFromLicenseEntityMapper, global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.LanguageEntity, GetRepo_Repository_PrimaryLanguage_Language> getRepo_Repository_PrimaryLanguage_LanguageFromLanguageEntityMapper, global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.PullRequestEntity, GetRepo_Repository_PullRequests_Nodes_PullRequest> getRepo_Repository_PullRequests_Nodes_PullRequestFromPullRequestEntityMapper, global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.IssueEntity, GetRepo_Repository_Issues_Edges_Node_Issue> getRepo_Repository_Issues_Edges_Node_IssueFromIssueEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getRepo_Repository_Discussions_Edges_Node_DiscussionFromDiscussionEntityMapper = getRepo_Repository_Discussions_Edges_Node_DiscussionFromDiscussionEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getRepo_Repository_Discussions_Edges_Node_DiscussionFromDiscussionEntityMapper));
            _getRepo_Repository_Discussions_Edges_Node_Answer_DiscussionCommentFromDiscussionCommentEntityMapper = getRepo_Repository_Discussions_Edges_Node_Answer_DiscussionCommentFromDiscussionCommentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getRepo_Repository_Discussions_Edges_Node_Answer_DiscussionCommentFromDiscussionCommentEntityMapper));
            _getRepo_Repository_Releases_Edges_Node_ReleaseFromReleaseEntityMapper = getRepo_Repository_Releases_Edges_Node_ReleaseFromReleaseEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getRepo_Repository_Releases_Edges_Node_ReleaseFromReleaseEntityMapper));
            _getRepo_Repository_CodeOfConduct_CodeOfConductFromCodeOfConductEntityMapper = getRepo_Repository_CodeOfConduct_CodeOfConductFromCodeOfConductEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getRepo_Repository_CodeOfConduct_CodeOfConductFromCodeOfConductEntityMapper));
            _getRepo_Repository_DefaultBranchRef_RefFromRefEntityMapper = getRepo_Repository_DefaultBranchRef_RefFromRefEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getRepo_Repository_DefaultBranchRef_RefFromRefEntityMapper));
            _getRepo_Repository_DefaultBranchRef_Target_BlobFromBlobEntityMapper = getRepo_Repository_DefaultBranchRef_Target_BlobFromBlobEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getRepo_Repository_DefaultBranchRef_Target_BlobFromBlobEntityMapper));
            _getRepo_Repository_DefaultBranchRef_Target_CommitFromCommitEntityMapper = getRepo_Repository_DefaultBranchRef_Target_CommitFromCommitEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getRepo_Repository_DefaultBranchRef_Target_CommitFromCommitEntityMapper));
            _getRepo_Repository_DefaultBranchRef_Target_TagFromTagEntityMapper = getRepo_Repository_DefaultBranchRef_Target_TagFromTagEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getRepo_Repository_DefaultBranchRef_Target_TagFromTagEntityMapper));
            _getRepo_Repository_DefaultBranchRef_Target_TreeFromTreeEntityMapper = getRepo_Repository_DefaultBranchRef_Target_TreeFromTreeEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getRepo_Repository_DefaultBranchRef_Target_TreeFromTreeEntityMapper));
            _getRepo_Repository_DefaultBranchRef_BranchProtectionRule_BranchProtectionRuleFromBranchProtectionRuleEntityMapper = getRepo_Repository_DefaultBranchRef_BranchProtectionRule_BranchProtectionRuleFromBranchProtectionRuleEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getRepo_Repository_DefaultBranchRef_BranchProtectionRule_BranchProtectionRuleFromBranchProtectionRuleEntityMapper));
            _getRepo_Repository_LicenseInfo_LicenseFromLicenseEntityMapper = getRepo_Repository_LicenseInfo_LicenseFromLicenseEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getRepo_Repository_LicenseInfo_LicenseFromLicenseEntityMapper));
            _getRepo_Repository_PrimaryLanguage_LanguageFromLanguageEntityMapper = getRepo_Repository_PrimaryLanguage_LanguageFromLanguageEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getRepo_Repository_PrimaryLanguage_LanguageFromLanguageEntityMapper));
            _getRepo_Repository_PullRequests_Nodes_PullRequestFromPullRequestEntityMapper = getRepo_Repository_PullRequests_Nodes_PullRequestFromPullRequestEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getRepo_Repository_PullRequests_Nodes_PullRequestFromPullRequestEntityMapper));
            _getRepo_Repository_Issues_Edges_Node_IssueFromIssueEntityMapper = getRepo_Repository_Issues_Edges_Node_IssueFromIssueEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getRepo_Repository_Issues_Edges_Node_IssueFromIssueEntityMapper));
        }

        public GetRepo_Repository_Repository Map(global::RepositoryAnalysis.Internal.GraphQL.State.RepositoryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetRepo_Repository_Repository(MapNonNullableIGetRepo_Repository_Discussions(entity.Discussions, snapshot), entity.IsSecurityPolicyEnabled, entity.SecurityPolicyUrl, entity.HasVulnerabilityAlertsEnabled, MapIGetRepo_Repository_VulnerabilityAlerts(entity.VulnerabilityAlerts, snapshot), MapNonNullableIGetRepo_Repository_Releases(entity.Releases, snapshot), entity.DiskUsage, entity.UpdatedAt, entity.PushedAt, MapNonNullableIGetRepo_Repository_RepositoryTopics(entity.RepositoryTopics, snapshot), MapIGetRepo_Repository_CodeOfConduct(entity.CodeOfConduct, snapshot), MapIGetRepo_Repository_Codeowners(entity.Codeowners, snapshot), MapIGetRepo_Repository_DefaultBranchRef(entity.DefaultBranchRef, snapshot), entity.Description, entity.HasDiscussionsEnabled, entity.HasIssuesEnabled, entity.IsArchived, entity.IsEmpty, entity.IsLocked, MapIGetRepo_Repository_IssueTemplatesNonNullableArray(entity.IssueTemplates, snapshot), MapIGetRepo_Repository_LicenseInfo(entity.LicenseInfo, snapshot), entity.OpenGraphImageUrl, MapIGetRepo_Repository_PrimaryLanguage(entity.PrimaryLanguage, snapshot), MapIGetRepo_Repository_PullRequestTemplatesNonNullableArray(entity.PullRequestTemplates, snapshot), entity.Url, MapNonNullableIGetRepo_Repository_PullRequests(entity.PullRequests, snapshot), MapNonNullableIGetRepo_Repository_Issues(entity.Issues, snapshot));
        }

        private global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_Discussions MapNonNullableIGetRepo_Repository_Discussions(global::RepositoryAnalysis.Internal.GraphQL.State.DiscussionConnectionData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetRepo_Repository_Discussions returnValue = default !;
            if (data.__typename.Equals("DiscussionConnection", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetRepo_Repository_Discussions_DiscussionConnection(MapIGetRepo_Repository_Discussions_EdgesArray(data.Edges, snapshot), data.TotalCount ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_Discussions_Edges?>? MapIGetRepo_Repository_Discussions_EdgesArray(global::System.Collections.Generic.IReadOnlyList<global::RepositoryAnalysis.Internal.GraphQL.State.DiscussionEdgeData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var discussionEdges = new global::System.Collections.Generic.List<global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_Discussions_Edges?>();
            foreach (global::RepositoryAnalysis.Internal.GraphQL.State.DiscussionEdgeData? child in list)
            {
                discussionEdges.Add(MapIGetRepo_Repository_Discussions_Edges(child, snapshot));
            }

            return discussionEdges;
        }

        private global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_Discussions_Edges? MapIGetRepo_Repository_Discussions_Edges(global::RepositoryAnalysis.Internal.GraphQL.State.DiscussionEdgeData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetRepo_Repository_Discussions_Edges returnValue = default !;
            if (data?.__typename.Equals("DiscussionEdge", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetRepo_Repository_Discussions_Edges_DiscussionEdge(MapIGetRepo_Repository_Discussions_Edges_Node(data.Node, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_Discussions_Edges_Node? MapIGetRepo_Repository_Discussions_Edges_Node(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Discussion", global::System.StringComparison.Ordinal))
            {
                return _getRepo_Repository_Discussions_Edges_Node_DiscussionFromDiscussionEntityMapper.Map(snapshot.GetEntity<global::RepositoryAnalysis.Internal.GraphQL.State.DiscussionEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_Discussions_Edges_Node_Answer? MapIGetRepo_Repository_Discussions_Edges_Node_Answer(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("DiscussionComment", global::System.StringComparison.Ordinal))
            {
                return _getRepo_Repository_Discussions_Edges_Node_Answer_DiscussionCommentFromDiscussionCommentEntityMapper.Map(snapshot.GetEntity<global::RepositoryAnalysis.Internal.GraphQL.State.DiscussionCommentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_VulnerabilityAlerts? MapIGetRepo_Repository_VulnerabilityAlerts(global::RepositoryAnalysis.Internal.GraphQL.State.RepositoryVulnerabilityAlertConnectionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetRepo_Repository_VulnerabilityAlerts returnValue = default !;
            if (data?.__typename.Equals("RepositoryVulnerabilityAlertConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetRepo_Repository_VulnerabilityAlerts_RepositoryVulnerabilityAlertConnection(data.TotalCount ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_Releases MapNonNullableIGetRepo_Repository_Releases(global::RepositoryAnalysis.Internal.GraphQL.State.ReleaseConnectionData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetRepo_Repository_Releases returnValue = default !;
            if (data.__typename.Equals("ReleaseConnection", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetRepo_Repository_Releases_ReleaseConnection(MapIGetRepo_Repository_Releases_EdgesArray(data.Edges, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_Releases_Edges?>? MapIGetRepo_Repository_Releases_EdgesArray(global::System.Collections.Generic.IReadOnlyList<global::RepositoryAnalysis.Internal.GraphQL.State.ReleaseEdgeData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var releaseEdges = new global::System.Collections.Generic.List<global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_Releases_Edges?>();
            foreach (global::RepositoryAnalysis.Internal.GraphQL.State.ReleaseEdgeData? child in list)
            {
                releaseEdges.Add(MapIGetRepo_Repository_Releases_Edges(child, snapshot));
            }

            return releaseEdges;
        }

        private global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_Releases_Edges? MapIGetRepo_Repository_Releases_Edges(global::RepositoryAnalysis.Internal.GraphQL.State.ReleaseEdgeData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetRepo_Repository_Releases_Edges returnValue = default !;
            if (data?.__typename.Equals("ReleaseEdge", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetRepo_Repository_Releases_Edges_ReleaseEdge(MapIGetRepo_Repository_Releases_Edges_Node(data.Node, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_Releases_Edges_Node? MapIGetRepo_Repository_Releases_Edges_Node(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Release", global::System.StringComparison.Ordinal))
            {
                return _getRepo_Repository_Releases_Edges_Node_ReleaseFromReleaseEntityMapper.Map(snapshot.GetEntity<global::RepositoryAnalysis.Internal.GraphQL.State.ReleaseEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_RepositoryTopics MapNonNullableIGetRepo_Repository_RepositoryTopics(global::RepositoryAnalysis.Internal.GraphQL.State.RepositoryTopicConnectionData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetRepo_Repository_RepositoryTopics returnValue = default !;
            if (data.__typename.Equals("RepositoryTopicConnection", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetRepo_Repository_RepositoryTopics_RepositoryTopicConnection(data.TotalCount ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_CodeOfConduct? MapIGetRepo_Repository_CodeOfConduct(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("CodeOfConduct", global::System.StringComparison.Ordinal))
            {
                return _getRepo_Repository_CodeOfConduct_CodeOfConductFromCodeOfConductEntityMapper.Map(snapshot.GetEntity<global::RepositoryAnalysis.Internal.GraphQL.State.CodeOfConductEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_Codeowners? MapIGetRepo_Repository_Codeowners(global::RepositoryAnalysis.Internal.GraphQL.State.RepositoryCodeownersData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetRepo_Repository_Codeowners returnValue = default !;
            if (data?.__typename.Equals("RepositoryCodeowners", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetRepo_Repository_Codeowners_RepositoryCodeowners(MapNonNullableIGetRepo_Repository_Codeowners_ErrorsNonNullableArray(data.Errors ?? throw new global::System.ArgumentNullException(), snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_Codeowners_Errors> MapNonNullableIGetRepo_Repository_Codeowners_ErrorsNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::RepositoryAnalysis.Internal.GraphQL.State.RepositoryCodeownersErrorData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                throw new global::System.ArgumentNullException();
            }

            var repositoryCodeownersErrors = new global::System.Collections.Generic.List<global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_Codeowners_Errors>();
            foreach (global::RepositoryAnalysis.Internal.GraphQL.State.RepositoryCodeownersErrorData child in list)
            {
                repositoryCodeownersErrors.Add(MapNonNullableIGetRepo_Repository_Codeowners_Errors(child, snapshot));
            }

            return repositoryCodeownersErrors;
        }

        private global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_Codeowners_Errors MapNonNullableIGetRepo_Repository_Codeowners_Errors(global::RepositoryAnalysis.Internal.GraphQL.State.RepositoryCodeownersErrorData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetRepo_Repository_Codeowners_Errors returnValue = default !;
            if (data.__typename.Equals("RepositoryCodeownersError", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetRepo_Repository_Codeowners_Errors_RepositoryCodeownersError(data.Kind ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_DefaultBranchRef? MapIGetRepo_Repository_DefaultBranchRef(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Ref", global::System.StringComparison.Ordinal))
            {
                return _getRepo_Repository_DefaultBranchRef_RefFromRefEntityMapper.Map(snapshot.GetEntity<global::RepositoryAnalysis.Internal.GraphQL.State.RefEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_DefaultBranchRef_Target? MapIGetRepo_Repository_DefaultBranchRef_Target(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Blob", global::System.StringComparison.Ordinal))
            {
                return _getRepo_Repository_DefaultBranchRef_Target_BlobFromBlobEntityMapper.Map(snapshot.GetEntity<global::RepositoryAnalysis.Internal.GraphQL.State.BlobEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("Commit", global::System.StringComparison.Ordinal))
            {
                return _getRepo_Repository_DefaultBranchRef_Target_CommitFromCommitEntityMapper.Map(snapshot.GetEntity<global::RepositoryAnalysis.Internal.GraphQL.State.CommitEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("Tag", global::System.StringComparison.Ordinal))
            {
                return _getRepo_Repository_DefaultBranchRef_Target_TagFromTagEntityMapper.Map(snapshot.GetEntity<global::RepositoryAnalysis.Internal.GraphQL.State.TagEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("Tree", global::System.StringComparison.Ordinal))
            {
                return _getRepo_Repository_DefaultBranchRef_Target_TreeFromTreeEntityMapper.Map(snapshot.GetEntity<global::RepositoryAnalysis.Internal.GraphQL.State.TreeEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_DefaultBranchRef_BranchProtectionRule? MapIGetRepo_Repository_DefaultBranchRef_BranchProtectionRule(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("BranchProtectionRule", global::System.StringComparison.Ordinal))
            {
                return _getRepo_Repository_DefaultBranchRef_BranchProtectionRule_BranchProtectionRuleFromBranchProtectionRuleEntityMapper.Map(snapshot.GetEntity<global::RepositoryAnalysis.Internal.GraphQL.State.BranchProtectionRuleEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_IssueTemplates>? MapIGetRepo_Repository_IssueTemplatesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::RepositoryAnalysis.Internal.GraphQL.State.IssueTemplateData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var issueTemplates = new global::System.Collections.Generic.List<global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_IssueTemplates>();
            foreach (global::RepositoryAnalysis.Internal.GraphQL.State.IssueTemplateData child in list)
            {
                issueTemplates.Add(MapNonNullableIGetRepo_Repository_IssueTemplates(child, snapshot));
            }

            return issueTemplates;
        }

        private global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_IssueTemplates MapNonNullableIGetRepo_Repository_IssueTemplates(global::RepositoryAnalysis.Internal.GraphQL.State.IssueTemplateData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetRepo_Repository_IssueTemplates returnValue = default !;
            if (data.__typename.Equals("IssueTemplate", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetRepo_Repository_IssueTemplates_IssueTemplate(data.Name ?? throw new global::System.ArgumentNullException(), data.Filename ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_LicenseInfo? MapIGetRepo_Repository_LicenseInfo(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("License", global::System.StringComparison.Ordinal))
            {
                return _getRepo_Repository_LicenseInfo_LicenseFromLicenseEntityMapper.Map(snapshot.GetEntity<global::RepositoryAnalysis.Internal.GraphQL.State.LicenseEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_PrimaryLanguage? MapIGetRepo_Repository_PrimaryLanguage(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Language", global::System.StringComparison.Ordinal))
            {
                return _getRepo_Repository_PrimaryLanguage_LanguageFromLanguageEntityMapper.Map(snapshot.GetEntity<global::RepositoryAnalysis.Internal.GraphQL.State.LanguageEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_PullRequestTemplates>? MapIGetRepo_Repository_PullRequestTemplatesNonNullableArray(global::System.Collections.Generic.IReadOnlyList<global::RepositoryAnalysis.Internal.GraphQL.State.PullRequestTemplateData>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var pullRequestTemplates = new global::System.Collections.Generic.List<global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_PullRequestTemplates>();
            foreach (global::RepositoryAnalysis.Internal.GraphQL.State.PullRequestTemplateData child in list)
            {
                pullRequestTemplates.Add(MapNonNullableIGetRepo_Repository_PullRequestTemplates(child, snapshot));
            }

            return pullRequestTemplates;
        }

        private global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_PullRequestTemplates MapNonNullableIGetRepo_Repository_PullRequestTemplates(global::RepositoryAnalysis.Internal.GraphQL.State.PullRequestTemplateData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetRepo_Repository_PullRequestTemplates returnValue = default !;
            if (data.__typename.Equals("PullRequestTemplate", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetRepo_Repository_PullRequestTemplates_PullRequestTemplate(data.Filename);
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_PullRequests MapNonNullableIGetRepo_Repository_PullRequests(global::RepositoryAnalysis.Internal.GraphQL.State.PullRequestConnectionData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetRepo_Repository_PullRequests returnValue = default !;
            if (data.__typename.Equals("PullRequestConnection", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetRepo_Repository_PullRequests_PullRequestConnection(MapIGetRepo_Repository_PullRequests_NodesArray(data.Nodes, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_PullRequests_Nodes?>? MapIGetRepo_Repository_PullRequests_NodesArray(global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var pullRequests = new global::System.Collections.Generic.List<global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_PullRequests_Nodes?>();
            foreach (global::StrawberryShake.EntityId? child in list)
            {
                pullRequests.Add(MapIGetRepo_Repository_PullRequests_Nodes(child, snapshot));
            }

            return pullRequests;
        }

        private global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_PullRequests_Nodes? MapIGetRepo_Repository_PullRequests_Nodes(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("PullRequest", global::System.StringComparison.Ordinal))
            {
                return _getRepo_Repository_PullRequests_Nodes_PullRequestFromPullRequestEntityMapper.Map(snapshot.GetEntity<global::RepositoryAnalysis.Internal.GraphQL.State.PullRequestEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_Issues MapNonNullableIGetRepo_Repository_Issues(global::RepositoryAnalysis.Internal.GraphQL.State.IssueConnectionData data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            IGetRepo_Repository_Issues returnValue = default !;
            if (data.__typename.Equals("IssueConnection", global::System.StringComparison.Ordinal))
            {
                returnValue = new GetRepo_Repository_Issues_IssueConnection(MapIGetRepo_Repository_Issues_EdgesArray(data.Edges, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::System.Collections.Generic.IReadOnlyList<global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_Issues_Edges?>? MapIGetRepo_Repository_Issues_EdgesArray(global::System.Collections.Generic.IReadOnlyList<global::RepositoryAnalysis.Internal.GraphQL.State.IssueEdgeData?>? list, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (list is null)
            {
                return null;
            }

            var issueEdges = new global::System.Collections.Generic.List<global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_Issues_Edges?>();
            foreach (global::RepositoryAnalysis.Internal.GraphQL.State.IssueEdgeData? child in list)
            {
                issueEdges.Add(MapIGetRepo_Repository_Issues_Edges(child, snapshot));
            }

            return issueEdges;
        }

        private global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_Issues_Edges? MapIGetRepo_Repository_Issues_Edges(global::RepositoryAnalysis.Internal.GraphQL.State.IssueEdgeData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetRepo_Repository_Issues_Edges returnValue = default !;
            if (data?.__typename.Equals("IssueEdge", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetRepo_Repository_Issues_Edges_IssueEdge(MapIGetRepo_Repository_Issues_Edges_Node(data.Node, snapshot));
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }

        private global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_Issues_Edges_Node? MapIGetRepo_Repository_Issues_Edges_Node(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Issue", global::System.StringComparison.Ordinal))
            {
                return _getRepo_Repository_Issues_Edges_Node_IssueFromIssueEntityMapper.Map(snapshot.GetEntity<global::RepositoryAnalysis.Internal.GraphQL.State.IssueEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_Issues_Edges_Node_Labels? MapIGetRepo_Repository_Issues_Edges_Node_Labels(global::RepositoryAnalysis.Internal.GraphQL.State.LabelConnectionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetRepo_Repository_Issues_Edges_Node_Labels returnValue = default !;
            if (data?.__typename.Equals("LabelConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetRepo_Repository_Issues_Edges_Node_Labels_LabelConnection(data.TotalCount ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetRepo_Repository_CodeOfConduct_CodeOfConductFromCodeOfConductEntityMapper : global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.CodeOfConductEntity, GetRepo_Repository_CodeOfConduct_CodeOfConduct>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetRepo_Repository_CodeOfConduct_CodeOfConductFromCodeOfConductEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetRepo_Repository_CodeOfConduct_CodeOfConduct Map(global::RepositoryAnalysis.Internal.GraphQL.State.CodeOfConductEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetRepo_Repository_CodeOfConduct_CodeOfConduct(entity.Url, entity.Name);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetRepo_Repository_DefaultBranchRef_RefFromRefEntityMapper : global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.RefEntity, GetRepo_Repository_DefaultBranchRef_Ref>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.BlobEntity, GetRepo_Repository_DefaultBranchRef_Target_Blob> _getRepo_Repository_DefaultBranchRef_Target_BlobFromBlobEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.CommitEntity, GetRepo_Repository_DefaultBranchRef_Target_Commit> _getRepo_Repository_DefaultBranchRef_Target_CommitFromCommitEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.TagEntity, GetRepo_Repository_DefaultBranchRef_Target_Tag> _getRepo_Repository_DefaultBranchRef_Target_TagFromTagEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.TreeEntity, GetRepo_Repository_DefaultBranchRef_Target_Tree> _getRepo_Repository_DefaultBranchRef_Target_TreeFromTreeEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.BranchProtectionRuleEntity, GetRepo_Repository_DefaultBranchRef_BranchProtectionRule_BranchProtectionRule> _getRepo_Repository_DefaultBranchRef_BranchProtectionRule_BranchProtectionRuleFromBranchProtectionRuleEntityMapper;
        public GetRepo_Repository_DefaultBranchRef_RefFromRefEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.BlobEntity, GetRepo_Repository_DefaultBranchRef_Target_Blob> getRepo_Repository_DefaultBranchRef_Target_BlobFromBlobEntityMapper, global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.CommitEntity, GetRepo_Repository_DefaultBranchRef_Target_Commit> getRepo_Repository_DefaultBranchRef_Target_CommitFromCommitEntityMapper, global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.TagEntity, GetRepo_Repository_DefaultBranchRef_Target_Tag> getRepo_Repository_DefaultBranchRef_Target_TagFromTagEntityMapper, global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.TreeEntity, GetRepo_Repository_DefaultBranchRef_Target_Tree> getRepo_Repository_DefaultBranchRef_Target_TreeFromTreeEntityMapper, global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.BranchProtectionRuleEntity, GetRepo_Repository_DefaultBranchRef_BranchProtectionRule_BranchProtectionRule> getRepo_Repository_DefaultBranchRef_BranchProtectionRule_BranchProtectionRuleFromBranchProtectionRuleEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getRepo_Repository_DefaultBranchRef_Target_BlobFromBlobEntityMapper = getRepo_Repository_DefaultBranchRef_Target_BlobFromBlobEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getRepo_Repository_DefaultBranchRef_Target_BlobFromBlobEntityMapper));
            _getRepo_Repository_DefaultBranchRef_Target_CommitFromCommitEntityMapper = getRepo_Repository_DefaultBranchRef_Target_CommitFromCommitEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getRepo_Repository_DefaultBranchRef_Target_CommitFromCommitEntityMapper));
            _getRepo_Repository_DefaultBranchRef_Target_TagFromTagEntityMapper = getRepo_Repository_DefaultBranchRef_Target_TagFromTagEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getRepo_Repository_DefaultBranchRef_Target_TagFromTagEntityMapper));
            _getRepo_Repository_DefaultBranchRef_Target_TreeFromTreeEntityMapper = getRepo_Repository_DefaultBranchRef_Target_TreeFromTreeEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getRepo_Repository_DefaultBranchRef_Target_TreeFromTreeEntityMapper));
            _getRepo_Repository_DefaultBranchRef_BranchProtectionRule_BranchProtectionRuleFromBranchProtectionRuleEntityMapper = getRepo_Repository_DefaultBranchRef_BranchProtectionRule_BranchProtectionRuleFromBranchProtectionRuleEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getRepo_Repository_DefaultBranchRef_BranchProtectionRule_BranchProtectionRuleFromBranchProtectionRuleEntityMapper));
        }

        public GetRepo_Repository_DefaultBranchRef_Ref Map(global::RepositoryAnalysis.Internal.GraphQL.State.RefEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetRepo_Repository_DefaultBranchRef_Ref(entity.Name, MapIGetRepo_Repository_DefaultBranchRef_Target(entity.Target, snapshot), MapIGetRepo_Repository_DefaultBranchRef_BranchProtectionRule(entity.BranchProtectionRule, snapshot));
        }

        private global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_DefaultBranchRef_Target? MapIGetRepo_Repository_DefaultBranchRef_Target(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Blob", global::System.StringComparison.Ordinal))
            {
                return _getRepo_Repository_DefaultBranchRef_Target_BlobFromBlobEntityMapper.Map(snapshot.GetEntity<global::RepositoryAnalysis.Internal.GraphQL.State.BlobEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("Commit", global::System.StringComparison.Ordinal))
            {
                return _getRepo_Repository_DefaultBranchRef_Target_CommitFromCommitEntityMapper.Map(snapshot.GetEntity<global::RepositoryAnalysis.Internal.GraphQL.State.CommitEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("Tag", global::System.StringComparison.Ordinal))
            {
                return _getRepo_Repository_DefaultBranchRef_Target_TagFromTagEntityMapper.Map(snapshot.GetEntity<global::RepositoryAnalysis.Internal.GraphQL.State.TagEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("Tree", global::System.StringComparison.Ordinal))
            {
                return _getRepo_Repository_DefaultBranchRef_Target_TreeFromTreeEntityMapper.Map(snapshot.GetEntity<global::RepositoryAnalysis.Internal.GraphQL.State.TreeEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        private global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_DefaultBranchRef_BranchProtectionRule? MapIGetRepo_Repository_DefaultBranchRef_BranchProtectionRule(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("BranchProtectionRule", global::System.StringComparison.Ordinal))
            {
                return _getRepo_Repository_DefaultBranchRef_BranchProtectionRule_BranchProtectionRuleFromBranchProtectionRuleEntityMapper.Map(snapshot.GetEntity<global::RepositoryAnalysis.Internal.GraphQL.State.BranchProtectionRuleEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetRepo_Repository_LicenseInfo_LicenseFromLicenseEntityMapper : global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.LicenseEntity, GetRepo_Repository_LicenseInfo_License>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetRepo_Repository_LicenseInfo_LicenseFromLicenseEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetRepo_Repository_LicenseInfo_License Map(global::RepositoryAnalysis.Internal.GraphQL.State.LicenseEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetRepo_Repository_LicenseInfo_License(entity.Name, entity.Url);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetRepo_Repository_PrimaryLanguage_LanguageFromLanguageEntityMapper : global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.LanguageEntity, GetRepo_Repository_PrimaryLanguage_Language>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetRepo_Repository_PrimaryLanguage_LanguageFromLanguageEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetRepo_Repository_PrimaryLanguage_Language Map(global::RepositoryAnalysis.Internal.GraphQL.State.LanguageEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetRepo_Repository_PrimaryLanguage_Language(entity.Name, entity.Color);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetRepo_Repository_DefaultBranchRef_Target_BlobFromBlobEntityMapper : global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.BlobEntity, GetRepo_Repository_DefaultBranchRef_Target_Blob>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetRepo_Repository_DefaultBranchRef_Target_BlobFromBlobEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetRepo_Repository_DefaultBranchRef_Target_Blob Map(global::RepositoryAnalysis.Internal.GraphQL.State.BlobEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetRepo_Repository_DefaultBranchRef_Target_Blob(entity.CommitResourcePath);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetRepo_Repository_DefaultBranchRef_Target_CommitFromCommitEntityMapper : global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.CommitEntity, GetRepo_Repository_DefaultBranchRef_Target_Commit>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetRepo_Repository_DefaultBranchRef_Target_CommitFromCommitEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetRepo_Repository_DefaultBranchRef_Target_Commit Map(global::RepositoryAnalysis.Internal.GraphQL.State.CommitEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetRepo_Repository_DefaultBranchRef_Target_Commit(entity.CommitResourcePath);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetRepo_Repository_DefaultBranchRef_Target_TagFromTagEntityMapper : global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.TagEntity, GetRepo_Repository_DefaultBranchRef_Target_Tag>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetRepo_Repository_DefaultBranchRef_Target_TagFromTagEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetRepo_Repository_DefaultBranchRef_Target_Tag Map(global::RepositoryAnalysis.Internal.GraphQL.State.TagEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetRepo_Repository_DefaultBranchRef_Target_Tag(entity.CommitResourcePath);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetRepo_Repository_DefaultBranchRef_Target_TreeFromTreeEntityMapper : global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.TreeEntity, GetRepo_Repository_DefaultBranchRef_Target_Tree>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetRepo_Repository_DefaultBranchRef_Target_TreeFromTreeEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetRepo_Repository_DefaultBranchRef_Target_Tree Map(global::RepositoryAnalysis.Internal.GraphQL.State.TreeEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetRepo_Repository_DefaultBranchRef_Target_Tree(entity.CommitResourcePath);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetRepo_Repository_DefaultBranchRef_BranchProtectionRule_BranchProtectionRuleFromBranchProtectionRuleEntityMapper : global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.BranchProtectionRuleEntity, GetRepo_Repository_DefaultBranchRef_BranchProtectionRule_BranchProtectionRule>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetRepo_Repository_DefaultBranchRef_BranchProtectionRule_BranchProtectionRuleFromBranchProtectionRuleEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetRepo_Repository_DefaultBranchRef_BranchProtectionRule_BranchProtectionRule Map(global::RepositoryAnalysis.Internal.GraphQL.State.BranchProtectionRuleEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetRepo_Repository_DefaultBranchRef_BranchProtectionRule_BranchProtectionRule(entity.AllowsForcePushes, entity.DismissesStaleReviews, entity.LockBranch, entity.RequiresApprovingReviews, entity.RequiresConversationResolution, entity.RequiresStatusChecks, entity.RequiresStrictStatusChecks);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetRepo_Repository_PullRequests_Nodes_PullRequestFromPullRequestEntityMapper : global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.PullRequestEntity, GetRepo_Repository_PullRequests_Nodes_PullRequest>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetRepo_Repository_PullRequests_Nodes_PullRequestFromPullRequestEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetRepo_Repository_PullRequests_Nodes_PullRequest Map(global::RepositoryAnalysis.Internal.GraphQL.State.PullRequestEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetRepo_Repository_PullRequests_Nodes_PullRequest(entity.CreatedAt);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetRepo_Repository_Discussions_Edges_Node_DiscussionFromDiscussionEntityMapper : global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.DiscussionEntity, GetRepo_Repository_Discussions_Edges_Node_Discussion>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.DiscussionCommentEntity, GetRepo_Repository_Discussions_Edges_Node_Answer_DiscussionComment> _getRepo_Repository_Discussions_Edges_Node_Answer_DiscussionCommentFromDiscussionCommentEntityMapper;
        public GetRepo_Repository_Discussions_Edges_Node_DiscussionFromDiscussionEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.DiscussionCommentEntity, GetRepo_Repository_Discussions_Edges_Node_Answer_DiscussionComment> getRepo_Repository_Discussions_Edges_Node_Answer_DiscussionCommentFromDiscussionCommentEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getRepo_Repository_Discussions_Edges_Node_Answer_DiscussionCommentFromDiscussionCommentEntityMapper = getRepo_Repository_Discussions_Edges_Node_Answer_DiscussionCommentFromDiscussionCommentEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getRepo_Repository_Discussions_Edges_Node_Answer_DiscussionCommentFromDiscussionCommentEntityMapper));
        }

        public GetRepo_Repository_Discussions_Edges_Node_Discussion Map(global::RepositoryAnalysis.Internal.GraphQL.State.DiscussionEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetRepo_Repository_Discussions_Edges_Node_Discussion(entity.Number, MapIGetRepo_Repository_Discussions_Edges_Node_Answer(entity.Answer, snapshot));
        }

        private global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_Discussions_Edges_Node_Answer? MapIGetRepo_Repository_Discussions_Edges_Node_Answer(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("DiscussionComment", global::System.StringComparison.Ordinal))
            {
                return _getRepo_Repository_Discussions_Edges_Node_Answer_DiscussionCommentFromDiscussionCommentEntityMapper.Map(snapshot.GetEntity<global::RepositoryAnalysis.Internal.GraphQL.State.DiscussionCommentEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetRepo_Repository_Releases_Edges_Node_ReleaseFromReleaseEntityMapper : global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.ReleaseEntity, GetRepo_Repository_Releases_Edges_Node_Release>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetRepo_Repository_Releases_Edges_Node_ReleaseFromReleaseEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetRepo_Repository_Releases_Edges_Node_Release Map(global::RepositoryAnalysis.Internal.GraphQL.State.ReleaseEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetRepo_Repository_Releases_Edges_Node_Release(entity.Name, entity.Url);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetRepo_Repository_Issues_Edges_Node_IssueFromIssueEntityMapper : global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.IssueEntity, GetRepo_Repository_Issues_Edges_Node_Issue>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetRepo_Repository_Issues_Edges_Node_IssueFromIssueEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetRepo_Repository_Issues_Edges_Node_Issue Map(global::RepositoryAnalysis.Internal.GraphQL.State.IssueEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetRepo_Repository_Issues_Edges_Node_Issue(MapIGetRepo_Repository_Issues_Edges_Node_Labels(entity.Labels, snapshot), entity.Number, entity.CreatedAt);
        }

        private global::RepositoryAnalysis.Internal.GraphQL.IGetRepo_Repository_Issues_Edges_Node_Labels? MapIGetRepo_Repository_Issues_Edges_Node_Labels(global::RepositoryAnalysis.Internal.GraphQL.State.LabelConnectionData? data, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (data is null)
            {
                return null;
            }

            IGetRepo_Repository_Issues_Edges_Node_Labels returnValue = default !;
            if (data?.__typename.Equals("LabelConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                returnValue = new GetRepo_Repository_Issues_Edges_Node_Labels_LabelConnection(data.TotalCount ?? throw new global::System.ArgumentNullException());
            }
            else
            {
                throw new global::System.NotSupportedException();
            }

            return returnValue;
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetRepo_Repository_Discussions_Edges_Node_Answer_DiscussionCommentFromDiscussionCommentEntityMapper : global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.DiscussionCommentEntity, GetRepo_Repository_Discussions_Edges_Node_Answer_DiscussionComment>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetRepo_Repository_Discussions_Edges_Node_Answer_DiscussionCommentFromDiscussionCommentEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetRepo_Repository_Discussions_Edges_Node_Answer_DiscussionComment Map(global::RepositoryAnalysis.Internal.GraphQL.State.DiscussionCommentEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetRepo_Repository_Discussions_Edges_Node_Answer_DiscussionComment(entity.IsAnswer);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetFileResultFactory : global::StrawberryShake.IOperationResultDataFactory<global::RepositoryAnalysis.Internal.GraphQL.GetFileResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.RepositoryEntity, GetFile_Repository_Repository> _getFile_Repository_RepositoryFromRepositoryEntityMapper;
        public GetFileResultFactory(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.RepositoryEntity, GetFile_Repository_Repository> getFile_Repository_RepositoryFromRepositoryEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getFile_Repository_RepositoryFromRepositoryEntityMapper = getFile_Repository_RepositoryFromRepositoryEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getFile_Repository_RepositoryFromRepositoryEntityMapper));
        }

        global::System.Type global::StrawberryShake.IOperationResultDataFactory.ResultType => typeof(global::RepositoryAnalysis.Internal.GraphQL.IGetFileResult);
        public GetFileResult Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            if (dataInfo is GetFileResultInfo info)
            {
                return new GetFileResult(MapIGetFile_Repository(info.Repository, snapshot));
            }

            throw new global::System.ArgumentException("GetFileResultInfo expected.");
        }

        private global::RepositoryAnalysis.Internal.GraphQL.IGetFile_Repository? MapIGetFile_Repository(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Repository", global::System.StringComparison.Ordinal))
            {
                return _getFile_Repository_RepositoryFromRepositoryEntityMapper.Map(snapshot.GetEntity<global::RepositoryAnalysis.Internal.GraphQL.State.RepositoryEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }

        global::System.Object global::StrawberryShake.IOperationResultDataFactory.Create(global::StrawberryShake.IOperationResultDataInfo dataInfo, global::StrawberryShake.IEntityStoreSnapshot? snapshot)
        {
            return Create(dataInfo, snapshot);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetFileResultInfo : global::StrawberryShake.IOperationResultDataInfo
    {
        private readonly global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> _entityIds;
        private readonly global::System.UInt64 _version;
        public GetFileResultInfo(global::StrawberryShake.EntityId? repository, global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> entityIds, global::System.UInt64 version)
        {
            Repository = repository;
            _entityIds = entityIds ?? throw new global::System.ArgumentNullException(nameof(entityIds));
            _version = version;
        }

        /// <summary>
        /// Lookup a given repository by the owner and repository name.
        /// </summary>
        public global::StrawberryShake.EntityId? Repository { get; }

        public global::System.Collections.Generic.IReadOnlyCollection<global::StrawberryShake.EntityId> EntityIds => _entityIds;
        public global::System.UInt64 Version => _version;
        public global::StrawberryShake.IOperationResultDataInfo WithVersion(global::System.UInt64 version)
        {
            return new GetFileResultInfo(Repository, _entityIds, version);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetFile_Repository_RepositoryFromRepositoryEntityMapper : global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.RepositoryEntity, GetFile_Repository_Repository>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.BlobEntity, GetFile_Repository_File_Blob> _getFile_Repository_File_BlobFromBlobEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.CommitEntity, GetFile_Repository_File_Commit> _getFile_Repository_File_CommitFromCommitEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.TagEntity, GetFile_Repository_File_Tag> _getFile_Repository_File_TagFromTagEntityMapper;
        private readonly global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.TreeEntity, GetFile_Repository_File_Tree> _getFile_Repository_File_TreeFromTreeEntityMapper;
        public GetFile_Repository_RepositoryFromRepositoryEntityMapper(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.BlobEntity, GetFile_Repository_File_Blob> getFile_Repository_File_BlobFromBlobEntityMapper, global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.CommitEntity, GetFile_Repository_File_Commit> getFile_Repository_File_CommitFromCommitEntityMapper, global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.TagEntity, GetFile_Repository_File_Tag> getFile_Repository_File_TagFromTagEntityMapper, global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.TreeEntity, GetFile_Repository_File_Tree> getFile_Repository_File_TreeFromTreeEntityMapper)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _getFile_Repository_File_BlobFromBlobEntityMapper = getFile_Repository_File_BlobFromBlobEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getFile_Repository_File_BlobFromBlobEntityMapper));
            _getFile_Repository_File_CommitFromCommitEntityMapper = getFile_Repository_File_CommitFromCommitEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getFile_Repository_File_CommitFromCommitEntityMapper));
            _getFile_Repository_File_TagFromTagEntityMapper = getFile_Repository_File_TagFromTagEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getFile_Repository_File_TagFromTagEntityMapper));
            _getFile_Repository_File_TreeFromTreeEntityMapper = getFile_Repository_File_TreeFromTreeEntityMapper ?? throw new global::System.ArgumentNullException(nameof(getFile_Repository_File_TreeFromTreeEntityMapper));
        }

        public GetFile_Repository_Repository Map(global::RepositoryAnalysis.Internal.GraphQL.State.RepositoryEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetFile_Repository_Repository(MapIGetFile_Repository_File(entity.File, snapshot));
        }

        private global::RepositoryAnalysis.Internal.GraphQL.IGetFile_Repository_File? MapIGetFile_Repository_File(global::StrawberryShake.EntityId? entityId, global::StrawberryShake.IEntityStoreSnapshot snapshot)
        {
            if (entityId is null)
            {
                return null;
            }

            if (entityId.Value.Name.Equals("Blob", global::System.StringComparison.Ordinal))
            {
                return _getFile_Repository_File_BlobFromBlobEntityMapper.Map(snapshot.GetEntity<global::RepositoryAnalysis.Internal.GraphQL.State.BlobEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("Commit", global::System.StringComparison.Ordinal))
            {
                return _getFile_Repository_File_CommitFromCommitEntityMapper.Map(snapshot.GetEntity<global::RepositoryAnalysis.Internal.GraphQL.State.CommitEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("Tag", global::System.StringComparison.Ordinal))
            {
                return _getFile_Repository_File_TagFromTagEntityMapper.Map(snapshot.GetEntity<global::RepositoryAnalysis.Internal.GraphQL.State.TagEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            if (entityId.Value.Name.Equals("Tree", global::System.StringComparison.Ordinal))
            {
                return _getFile_Repository_File_TreeFromTreeEntityMapper.Map(snapshot.GetEntity<global::RepositoryAnalysis.Internal.GraphQL.State.TreeEntity>(entityId.Value) ?? throw new global::StrawberryShake.GraphQLClientException());
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetFile_Repository_File_BlobFromBlobEntityMapper : global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.BlobEntity, GetFile_Repository_File_Blob>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetFile_Repository_File_BlobFromBlobEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetFile_Repository_File_Blob Map(global::RepositoryAnalysis.Internal.GraphQL.State.BlobEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetFile_Repository_File_Blob(entity.Text);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetFile_Repository_File_CommitFromCommitEntityMapper : global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.CommitEntity, GetFile_Repository_File_Commit>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetFile_Repository_File_CommitFromCommitEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetFile_Repository_File_Commit Map(global::RepositoryAnalysis.Internal.GraphQL.State.CommitEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetFile_Repository_File_Commit();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetFile_Repository_File_TagFromTagEntityMapper : global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.TagEntity, GetFile_Repository_File_Tag>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetFile_Repository_File_TagFromTagEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetFile_Repository_File_Tag Map(global::RepositoryAnalysis.Internal.GraphQL.State.TagEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetFile_Repository_File_Tag();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetFile_Repository_File_TreeFromTreeEntityMapper : global::StrawberryShake.IEntityMapper<global::RepositoryAnalysis.Internal.GraphQL.State.TreeEntity, GetFile_Repository_File_Tree>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        public GetFile_Repository_File_TreeFromTreeEntityMapper(global::StrawberryShake.IEntityStore entityStore)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
        }

        public GetFile_Repository_File_Tree Map(global::RepositoryAnalysis.Internal.GraphQL.State.TreeEntity entity, global::StrawberryShake.IEntityStoreSnapshot? snapshot = null)
        {
            if (snapshot is null)
            {
                snapshot = _entityStore.CurrentSnapshot;
            }

            return new GetFile_Repository_File_Tree();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetAgeBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::RepositoryAnalysis.Internal.GraphQL.IGetAgeResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::RepositoryAnalysis.Internal.GraphQL.IGetAgeResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        public GetAgeBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::RepositoryAnalysis.Internal.GraphQL.IGetAgeResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetAgeResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetAgeResult Result, GetAgeResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGetAgeResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetAgeResult, GetAgeResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::StrawberryShake.EntityId? repositoryId = default !;
            _entityStore.Update(session =>
            {
                repositoryId = UpdateIGetAge_RepositoryEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "repository"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetAgeResultInfo(repositoryId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::StrawberryShake.EntityId? UpdateIGetAge_RepositoryEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Repository", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::RepositoryAnalysis.Internal.GraphQL.State.RepositoryEntity? entity))
                {
                    session.SetEntity(entityId, new global::RepositoryAnalysis.Internal.GraphQL.State.RepositoryEntity(DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "updatedAt")), DeserializeDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "pushedAt")), entity.Discussions, entity.IsSecurityPolicyEnabled, entity.SecurityPolicyUrl, entity.HasVulnerabilityAlertsEnabled, entity.VulnerabilityAlerts, entity.Releases, entity.DiskUsage, entity.RepositoryTopics, entity.CodeOfConduct, entity.Codeowners, entity.DefaultBranchRef, entity.Description, entity.HasDiscussionsEnabled, entity.HasIssuesEnabled, entity.IsArchived, entity.IsEmpty, entity.IsLocked, entity.IssueTemplates, entity.LicenseInfo, entity.OpenGraphImageUrl, entity.PrimaryLanguage, entity.PullRequestTemplates, entity.Url, entity.PullRequests, entity.Issues, entity.File));
                }
                else
                {
                    session.SetEntity(entityId, new global::RepositoryAnalysis.Internal.GraphQL.State.RepositoryEntity(DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "updatedAt")), DeserializeDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "pushedAt")), default !, default !, default !, default !, default !, default !, default !, default !, default !, default !, default !, default !, default !, default !, default !, default !, default !, default !, default !, default !, default !, default !, default !, default !, default !, default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.DateTimeOffset DeserializeNonNullableDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.DateTimeOffset? DeserializeDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetRepoBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::RepositoryAnalysis.Internal.GraphQL.IGetRepoResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::RepositoryAnalysis.Internal.GraphQL.IGetRepoResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Boolean, global::System.Boolean> _booleanParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.Uri> _uRIParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.Int32, global::System.Int32> _intParser;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.DateTimeOffset> _dateTimeParser;
        public GetRepoBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::RepositoryAnalysis.Internal.GraphQL.IGetRepoResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
            _booleanParser = serializerResolver.GetLeafValueParser<global::System.Boolean, global::System.Boolean>("Boolean") ?? throw new global::System.ArgumentException("No serializer for type `Boolean` found.");
            _uRIParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.Uri>("URI") ?? throw new global::System.ArgumentException("No serializer for type `URI` found.");
            _intParser = serializerResolver.GetLeafValueParser<global::System.Int32, global::System.Int32>("Int") ?? throw new global::System.ArgumentException("No serializer for type `Int` found.");
            _dateTimeParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.DateTimeOffset>("DateTime") ?? throw new global::System.ArgumentException("No serializer for type `DateTime` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetRepoResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetRepoResult Result, GetRepoResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGetRepoResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetRepoResult, GetRepoResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::StrawberryShake.EntityId? repositoryId = default !;
            _entityStore.Update(session =>
            {
                repositoryId = UpdateIGetRepo_RepositoryEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "repository"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetRepoResultInfo(repositoryId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::StrawberryShake.EntityId? UpdateIGetRepo_RepositoryEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Repository", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::RepositoryAnalysis.Internal.GraphQL.State.RepositoryEntity? entity))
                {
                    session.SetEntity(entityId, new global::RepositoryAnalysis.Internal.GraphQL.State.RepositoryEntity(DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "updatedAt")), DeserializeDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "pushedAt")), DeserializeNonNullableIGetRepo_Repository_Discussions(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "discussions"), entityIds), DeserializeBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "isSecurityPolicyEnabled")), DeserializeUri(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "securityPolicyUrl")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hasVulnerabilityAlertsEnabled")), DeserializeIGetRepo_Repository_VulnerabilityAlerts(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "vulnerabilityAlerts")), DeserializeNonNullableIGetRepo_Repository_Releases(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "releases"), entityIds), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "diskUsage")), DeserializeNonNullableIGetRepo_Repository_RepositoryTopics(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "repositoryTopics")), UpdateIGetRepo_Repository_CodeOfConductEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "codeOfConduct"), entityIds), DeserializeIGetRepo_Repository_Codeowners(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "codeowners")), UpdateIGetRepo_Repository_DefaultBranchRefEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "defaultBranchRef"), entityIds), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "description")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hasDiscussionsEnabled")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hasIssuesEnabled")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "isArchived")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "isEmpty")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "isLocked")), DeserializeIGetRepo_Repository_IssueTemplatesNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "issueTemplates")), UpdateIGetRepo_Repository_LicenseInfoEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "licenseInfo"), entityIds), DeserializeNonNullableUri(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "openGraphImageUrl")), UpdateIGetRepo_Repository_PrimaryLanguageEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "primaryLanguage"), entityIds), DeserializeIGetRepo_Repository_PullRequestTemplatesNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "pullRequestTemplates")), DeserializeNonNullableUri(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "url")), DeserializeNonNullableIGetRepo_Repository_PullRequests(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "pullRequests"), entityIds), DeserializeNonNullableIGetRepo_Repository_Issues(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "issues"), entityIds), entity.File));
                }
                else
                {
                    session.SetEntity(entityId, new global::RepositoryAnalysis.Internal.GraphQL.State.RepositoryEntity(DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "updatedAt")), DeserializeDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "pushedAt")), DeserializeNonNullableIGetRepo_Repository_Discussions(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "discussions"), entityIds), DeserializeBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "isSecurityPolicyEnabled")), DeserializeUri(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "securityPolicyUrl")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hasVulnerabilityAlertsEnabled")), DeserializeIGetRepo_Repository_VulnerabilityAlerts(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "vulnerabilityAlerts")), DeserializeNonNullableIGetRepo_Repository_Releases(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "releases"), entityIds), DeserializeInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "diskUsage")), DeserializeNonNullableIGetRepo_Repository_RepositoryTopics(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "repositoryTopics")), UpdateIGetRepo_Repository_CodeOfConductEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "codeOfConduct"), entityIds), DeserializeIGetRepo_Repository_Codeowners(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "codeowners")), UpdateIGetRepo_Repository_DefaultBranchRefEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "defaultBranchRef"), entityIds), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "description")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hasDiscussionsEnabled")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "hasIssuesEnabled")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "isArchived")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "isEmpty")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "isLocked")), DeserializeIGetRepo_Repository_IssueTemplatesNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "issueTemplates")), UpdateIGetRepo_Repository_LicenseInfoEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "licenseInfo"), entityIds), DeserializeNonNullableUri(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "openGraphImageUrl")), UpdateIGetRepo_Repository_PrimaryLanguageEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "primaryLanguage"), entityIds), DeserializeIGetRepo_Repository_PullRequestTemplatesNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "pullRequestTemplates")), DeserializeNonNullableUri(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "url")), DeserializeNonNullableIGetRepo_Repository_PullRequests(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "pullRequests"), entityIds), DeserializeNonNullableIGetRepo_Repository_Issues(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "issues"), entityIds), default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::RepositoryAnalysis.Internal.GraphQL.State.DiscussionConnectionData DeserializeNonNullableIGetRepo_Repository_Discussions(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DiscussionConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::RepositoryAnalysis.Internal.GraphQL.State.DiscussionConnectionData(typename, edges: DeserializeIGetRepo_Repository_Discussions_EdgesArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "edges"), entityIds), totalCount: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "totalCount")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::RepositoryAnalysis.Internal.GraphQL.State.DiscussionEdgeData?>? DeserializeIGetRepo_Repository_Discussions_EdgesArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var discussionEdges = new global::System.Collections.Generic.List<global::RepositoryAnalysis.Internal.GraphQL.State.DiscussionEdgeData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                discussionEdges.Add(DeserializeIGetRepo_Repository_Discussions_Edges(session, child, entityIds));
            }

            return discussionEdges;
        }

        private global::RepositoryAnalysis.Internal.GraphQL.State.DiscussionEdgeData? DeserializeIGetRepo_Repository_Discussions_Edges(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("DiscussionEdge", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::RepositoryAnalysis.Internal.GraphQL.State.DiscussionEdgeData(typename, node: UpdateIGetRepo_Repository_Discussions_Edges_NodeEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "node"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIGetRepo_Repository_Discussions_Edges_NodeEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Discussion", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::RepositoryAnalysis.Internal.GraphQL.State.DiscussionEntity? entity))
                {
                    session.SetEntity(entityId, new global::RepositoryAnalysis.Internal.GraphQL.State.DiscussionEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "number")), UpdateIGetRepo_Repository_Discussions_Edges_Node_AnswerEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "answer"), entityIds)));
                }
                else
                {
                    session.SetEntity(entityId, new global::RepositoryAnalysis.Internal.GraphQL.State.DiscussionEntity(DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "number")), UpdateIGetRepo_Repository_Discussions_Edges_Node_AnswerEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "answer"), entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Int32 DeserializeNonNullableInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::StrawberryShake.EntityId? UpdateIGetRepo_Repository_Discussions_Edges_Node_AnswerEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("DiscussionComment", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::RepositoryAnalysis.Internal.GraphQL.State.DiscussionCommentEntity? entity))
                {
                    session.SetEntity(entityId, new global::RepositoryAnalysis.Internal.GraphQL.State.DiscussionCommentEntity(DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "isAnswer"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::RepositoryAnalysis.Internal.GraphQL.State.DiscussionCommentEntity(DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "isAnswer"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Boolean DeserializeNonNullableBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::System.Boolean? DeserializeBoolean(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _booleanParser.Parse(obj.Value.GetBoolean()!);
        }

        private global::System.Uri? DeserializeUri(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _uRIParser.Parse(obj.Value.GetString()!);
        }

        private global::RepositoryAnalysis.Internal.GraphQL.State.RepositoryVulnerabilityAlertConnectionData? DeserializeIGetRepo_Repository_VulnerabilityAlerts(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("RepositoryVulnerabilityAlertConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::RepositoryAnalysis.Internal.GraphQL.State.RepositoryVulnerabilityAlertConnectionData(typename, totalCount: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "totalCount")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::RepositoryAnalysis.Internal.GraphQL.State.ReleaseConnectionData DeserializeNonNullableIGetRepo_Repository_Releases(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ReleaseConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::RepositoryAnalysis.Internal.GraphQL.State.ReleaseConnectionData(typename, edges: DeserializeIGetRepo_Repository_Releases_EdgesArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "edges"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::RepositoryAnalysis.Internal.GraphQL.State.ReleaseEdgeData?>? DeserializeIGetRepo_Repository_Releases_EdgesArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var releaseEdges = new global::System.Collections.Generic.List<global::RepositoryAnalysis.Internal.GraphQL.State.ReleaseEdgeData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                releaseEdges.Add(DeserializeIGetRepo_Repository_Releases_Edges(session, child, entityIds));
            }

            return releaseEdges;
        }

        private global::RepositoryAnalysis.Internal.GraphQL.State.ReleaseEdgeData? DeserializeIGetRepo_Repository_Releases_Edges(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("ReleaseEdge", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::RepositoryAnalysis.Internal.GraphQL.State.ReleaseEdgeData(typename, node: UpdateIGetRepo_Repository_Releases_Edges_NodeEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "node"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIGetRepo_Repository_Releases_Edges_NodeEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Release", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::RepositoryAnalysis.Internal.GraphQL.State.ReleaseEntity? entity))
                {
                    session.SetEntity(entityId, new global::RepositoryAnalysis.Internal.GraphQL.State.ReleaseEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeNonNullableUri(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "url"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::RepositoryAnalysis.Internal.GraphQL.State.ReleaseEntity(DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeNonNullableUri(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "url"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Uri DeserializeNonNullableUri(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _uRIParser.Parse(obj.Value.GetString()!);
        }

        private global::System.Int32? DeserializeInt32(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _intParser.Parse(obj.Value.GetInt32()!);
        }

        private global::System.DateTimeOffset DeserializeNonNullableDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::System.DateTimeOffset? DeserializeDateTimeOffset(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _dateTimeParser.Parse(obj.Value.GetString()!);
        }

        private global::RepositoryAnalysis.Internal.GraphQL.State.RepositoryTopicConnectionData DeserializeNonNullableIGetRepo_Repository_RepositoryTopics(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("RepositoryTopicConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::RepositoryAnalysis.Internal.GraphQL.State.RepositoryTopicConnectionData(typename, totalCount: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "totalCount")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIGetRepo_Repository_CodeOfConductEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("CodeOfConduct", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::RepositoryAnalysis.Internal.GraphQL.State.CodeOfConductEntity? entity))
                {
                    session.SetEntity(entityId, new global::RepositoryAnalysis.Internal.GraphQL.State.CodeOfConductEntity(DeserializeUri(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "url")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::RepositoryAnalysis.Internal.GraphQL.State.CodeOfConductEntity(DeserializeUri(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "url")), DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String DeserializeNonNullableString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }

        private global::RepositoryAnalysis.Internal.GraphQL.State.RepositoryCodeownersData? DeserializeIGetRepo_Repository_Codeowners(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("RepositoryCodeowners", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::RepositoryAnalysis.Internal.GraphQL.State.RepositoryCodeownersData(typename, errors: DeserializeNonNullableIGetRepo_Repository_Codeowners_ErrorsNonNullableArray(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "errors")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::RepositoryAnalysis.Internal.GraphQL.State.RepositoryCodeownersErrorData> DeserializeNonNullableIGetRepo_Repository_Codeowners_ErrorsNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var repositoryCodeownersErrors = new global::System.Collections.Generic.List<global::RepositoryAnalysis.Internal.GraphQL.State.RepositoryCodeownersErrorData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                repositoryCodeownersErrors.Add(DeserializeNonNullableIGetRepo_Repository_Codeowners_Errors(child));
            }

            return repositoryCodeownersErrors;
        }

        private global::RepositoryAnalysis.Internal.GraphQL.State.RepositoryCodeownersErrorData DeserializeNonNullableIGetRepo_Repository_Codeowners_Errors(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("RepositoryCodeownersError", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::RepositoryAnalysis.Internal.GraphQL.State.RepositoryCodeownersErrorData(typename, kind: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "kind")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIGetRepo_Repository_DefaultBranchRefEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Ref", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::RepositoryAnalysis.Internal.GraphQL.State.RefEntity? entity))
                {
                    session.SetEntity(entityId, new global::RepositoryAnalysis.Internal.GraphQL.State.RefEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), UpdateIGetRepo_Repository_DefaultBranchRef_TargetEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "target"), entityIds), UpdateIGetRepo_Repository_DefaultBranchRef_BranchProtectionRuleEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "branchProtectionRule"), entityIds)));
                }
                else
                {
                    session.SetEntity(entityId, new global::RepositoryAnalysis.Internal.GraphQL.State.RefEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), UpdateIGetRepo_Repository_DefaultBranchRef_TargetEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "target"), entityIds), UpdateIGetRepo_Repository_DefaultBranchRef_BranchProtectionRuleEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "branchProtectionRule"), entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIGetRepo_Repository_DefaultBranchRef_TargetEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Blob", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::RepositoryAnalysis.Internal.GraphQL.State.BlobEntity? entity))
                {
                    session.SetEntity(entityId, new global::RepositoryAnalysis.Internal.GraphQL.State.BlobEntity(DeserializeNonNullableUri(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "commitResourcePath")), entity.Text));
                }
                else
                {
                    session.SetEntity(entityId, new global::RepositoryAnalysis.Internal.GraphQL.State.BlobEntity(DeserializeNonNullableUri(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "commitResourcePath")), default !));
                }

                return entityId;
            }

            if (entityId.Name.Equals("Commit", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::RepositoryAnalysis.Internal.GraphQL.State.CommitEntity? entity))
                {
                    session.SetEntity(entityId, new global::RepositoryAnalysis.Internal.GraphQL.State.CommitEntity(DeserializeNonNullableUri(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "commitResourcePath"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::RepositoryAnalysis.Internal.GraphQL.State.CommitEntity(DeserializeNonNullableUri(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "commitResourcePath"))));
                }

                return entityId;
            }

            if (entityId.Name.Equals("Tag", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::RepositoryAnalysis.Internal.GraphQL.State.TagEntity? entity))
                {
                    session.SetEntity(entityId, new global::RepositoryAnalysis.Internal.GraphQL.State.TagEntity(DeserializeNonNullableUri(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "commitResourcePath"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::RepositoryAnalysis.Internal.GraphQL.State.TagEntity(DeserializeNonNullableUri(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "commitResourcePath"))));
                }

                return entityId;
            }

            if (entityId.Name.Equals("Tree", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::RepositoryAnalysis.Internal.GraphQL.State.TreeEntity? entity))
                {
                    session.SetEntity(entityId, new global::RepositoryAnalysis.Internal.GraphQL.State.TreeEntity(DeserializeNonNullableUri(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "commitResourcePath"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::RepositoryAnalysis.Internal.GraphQL.State.TreeEntity(DeserializeNonNullableUri(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "commitResourcePath"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIGetRepo_Repository_DefaultBranchRef_BranchProtectionRuleEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("BranchProtectionRule", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::RepositoryAnalysis.Internal.GraphQL.State.BranchProtectionRuleEntity? entity))
                {
                    session.SetEntity(entityId, new global::RepositoryAnalysis.Internal.GraphQL.State.BranchProtectionRuleEntity(DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "allowsForcePushes")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "dismissesStaleReviews")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "lockBranch")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "requiresApprovingReviews")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "requiresConversationResolution")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "requiresStatusChecks")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "requiresStrictStatusChecks"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::RepositoryAnalysis.Internal.GraphQL.State.BranchProtectionRuleEntity(DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "allowsForcePushes")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "dismissesStaleReviews")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "lockBranch")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "requiresApprovingReviews")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "requiresConversationResolution")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "requiresStatusChecks")), DeserializeNonNullableBoolean(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "requiresStrictStatusChecks"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::RepositoryAnalysis.Internal.GraphQL.State.IssueTemplateData>? DeserializeIGetRepo_Repository_IssueTemplatesNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var issueTemplates = new global::System.Collections.Generic.List<global::RepositoryAnalysis.Internal.GraphQL.State.IssueTemplateData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                issueTemplates.Add(DeserializeNonNullableIGetRepo_Repository_IssueTemplates(child));
            }

            return issueTemplates;
        }

        private global::RepositoryAnalysis.Internal.GraphQL.State.IssueTemplateData DeserializeNonNullableIGetRepo_Repository_IssueTemplates(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("IssueTemplate", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::RepositoryAnalysis.Internal.GraphQL.State.IssueTemplateData(typename, name: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), filename: DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "filename")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIGetRepo_Repository_LicenseInfoEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("License", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::RepositoryAnalysis.Internal.GraphQL.State.LicenseEntity? entity))
                {
                    session.SetEntity(entityId, new global::RepositoryAnalysis.Internal.GraphQL.State.LicenseEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeUri(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "url"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::RepositoryAnalysis.Internal.GraphQL.State.LicenseEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeUri(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "url"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIGetRepo_Repository_PrimaryLanguageEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Language", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::RepositoryAnalysis.Internal.GraphQL.State.LanguageEntity? entity))
                {
                    session.SetEntity(entityId, new global::RepositoryAnalysis.Internal.GraphQL.State.LanguageEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "color"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::RepositoryAnalysis.Internal.GraphQL.State.LanguageEntity(DeserializeNonNullableString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "name")), DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "color"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::RepositoryAnalysis.Internal.GraphQL.State.PullRequestTemplateData>? DeserializeIGetRepo_Repository_PullRequestTemplatesNonNullableArray(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var pullRequestTemplates = new global::System.Collections.Generic.List<global::RepositoryAnalysis.Internal.GraphQL.State.PullRequestTemplateData>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                pullRequestTemplates.Add(DeserializeNonNullableIGetRepo_Repository_PullRequestTemplates(child));
            }

            return pullRequestTemplates;
        }

        private global::RepositoryAnalysis.Internal.GraphQL.State.PullRequestTemplateData DeserializeNonNullableIGetRepo_Repository_PullRequestTemplates(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("PullRequestTemplate", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::RepositoryAnalysis.Internal.GraphQL.State.PullRequestTemplateData(typename, filename: DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "filename")));
            }

            throw new global::System.NotSupportedException();
        }

        private global::RepositoryAnalysis.Internal.GraphQL.State.PullRequestConnectionData DeserializeNonNullableIGetRepo_Repository_PullRequests(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("PullRequestConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::RepositoryAnalysis.Internal.GraphQL.State.PullRequestConnectionData(typename, nodes: UpdateIGetRepo_Repository_PullRequests_NodesEntityArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "nodes"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? UpdateIGetRepo_Repository_PullRequests_NodesEntityArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var pullRequests = new global::System.Collections.Generic.List<global::StrawberryShake.EntityId?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                pullRequests.Add(UpdateIGetRepo_Repository_PullRequests_NodesEntity(session, child, entityIds));
            }

            return pullRequests;
        }

        private global::StrawberryShake.EntityId? UpdateIGetRepo_Repository_PullRequests_NodesEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("PullRequest", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::RepositoryAnalysis.Internal.GraphQL.State.PullRequestEntity? entity))
                {
                    session.SetEntity(entityId, new global::RepositoryAnalysis.Internal.GraphQL.State.PullRequestEntity(DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createdAt"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::RepositoryAnalysis.Internal.GraphQL.State.PullRequestEntity(DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createdAt"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::RepositoryAnalysis.Internal.GraphQL.State.IssueConnectionData DeserializeNonNullableIGetRepo_Repository_Issues(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                throw new global::System.ArgumentNullException();
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("IssueConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::RepositoryAnalysis.Internal.GraphQL.State.IssueConnectionData(typename, edges: DeserializeIGetRepo_Repository_Issues_EdgesArray(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "edges"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.Collections.Generic.IReadOnlyList<global::RepositoryAnalysis.Internal.GraphQL.State.IssueEdgeData?>? DeserializeIGetRepo_Repository_Issues_EdgesArray(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var issueEdges = new global::System.Collections.Generic.List<global::RepositoryAnalysis.Internal.GraphQL.State.IssueEdgeData?>();
            foreach (global::System.Text.Json.JsonElement child in obj.Value.EnumerateArray())
            {
                issueEdges.Add(DeserializeIGetRepo_Repository_Issues_Edges(session, child, entityIds));
            }

            return issueEdges;
        }

        private global::RepositoryAnalysis.Internal.GraphQL.State.IssueEdgeData? DeserializeIGetRepo_Repository_Issues_Edges(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("IssueEdge", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::RepositoryAnalysis.Internal.GraphQL.State.IssueEdgeData(typename, node: UpdateIGetRepo_Repository_Issues_Edges_NodeEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "node"), entityIds));
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIGetRepo_Repository_Issues_Edges_NodeEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Issue", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::RepositoryAnalysis.Internal.GraphQL.State.IssueEntity? entity))
                {
                    session.SetEntity(entityId, new global::RepositoryAnalysis.Internal.GraphQL.State.IssueEntity(DeserializeIGetRepo_Repository_Issues_Edges_Node_Labels(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "labels")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "number")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createdAt"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::RepositoryAnalysis.Internal.GraphQL.State.IssueEntity(DeserializeIGetRepo_Repository_Issues_Edges_Node_Labels(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "labels")), DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "number")), DeserializeNonNullableDateTimeOffset(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "createdAt"))));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::RepositoryAnalysis.Internal.GraphQL.State.LabelConnectionData? DeserializeIGetRepo_Repository_Issues_Edges_Node_Labels(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            var typename = obj.Value.GetProperty("__typename").GetString();
            if (typename?.Equals("LabelConnection", global::System.StringComparison.Ordinal) ?? false)
            {
                return new global::RepositoryAnalysis.Internal.GraphQL.State.LabelConnectionData(typename, totalCount: DeserializeNonNullableInt32(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "totalCount")));
            }

            throw new global::System.NotSupportedException();
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GetFileBuilder : global::StrawberryShake.IOperationResultBuilder<global::System.Text.Json.JsonDocument, global::RepositoryAnalysis.Internal.GraphQL.IGetFileResult>
    {
        private readonly global::StrawberryShake.IEntityStore _entityStore;
        private readonly global::StrawberryShake.IEntityIdSerializer _idSerializer;
        private readonly global::StrawberryShake.IOperationResultDataFactory<global::RepositoryAnalysis.Internal.GraphQL.IGetFileResult> _resultDataFactory;
        private readonly global::StrawberryShake.Serialization.ILeafValueParser<global::System.String, global::System.String> _stringParser;
        public GetFileBuilder(global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer idSerializer, global::StrawberryShake.IOperationResultDataFactory<global::RepositoryAnalysis.Internal.GraphQL.IGetFileResult> resultDataFactory, global::StrawberryShake.Serialization.ISerializerResolver serializerResolver)
        {
            _entityStore = entityStore ?? throw new global::System.ArgumentNullException(nameof(entityStore));
            _idSerializer = idSerializer ?? throw new global::System.ArgumentNullException(nameof(idSerializer));
            _resultDataFactory = resultDataFactory ?? throw new global::System.ArgumentNullException(nameof(resultDataFactory));
            _stringParser = serializerResolver.GetLeafValueParser<global::System.String, global::System.String>("String") ?? throw new global::System.ArgumentException("No serializer for type `String` found.");
        }

        public global::StrawberryShake.IOperationResult<IGetFileResult> Build(global::StrawberryShake.Response<global::System.Text.Json.JsonDocument> response)
        {
            (IGetFileResult Result, GetFileResultInfo Info)? data = null;
            global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.IClientError>? errors = null;
            if (response.Exception is null)
            {
                try
                {
                    if (response.Body != null)
                    {
                        if (response.Body.RootElement.TryGetProperty("data", out global::System.Text.Json.JsonElement dataElement) && dataElement.ValueKind == global::System.Text.Json.JsonValueKind.Object)
                        {
                            data = BuildData(dataElement);
                        }

                        if (response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                        {
                            errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                        }
                    }
                }
                catch (global::System.Exception ex)
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(ex.Message, exception: ex, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }
            else
            {
                if (response.Body != null && response.Body.RootElement.TryGetProperty("errors", out global::System.Text.Json.JsonElement errorsElement))
                {
                    errors = global::StrawberryShake.Json.JsonErrorParser.ParseErrors(errorsElement);
                }
                else
                {
                    errors = new global::StrawberryShake.IClientError[]{new global::StrawberryShake.ClientError(response.Exception.Message, exception: response.Exception, extensions: new global::System.Collections.Generic.Dictionary<global::System.String, global::System.Object?>{{"body", response.Body?.RootElement.ToString()}})};
                }
            }

            return new global::StrawberryShake.OperationResult<IGetFileResult>(data?.Result, data?.Info, _resultDataFactory, errors);
        }

        private (IGetFileResult, GetFileResultInfo) BuildData(global::System.Text.Json.JsonElement obj)
        {
            var entityIds = new global::System.Collections.Generic.HashSet<global::StrawberryShake.EntityId>();
            global::StrawberryShake.IEntityStoreSnapshot snapshot = default !;
            global::StrawberryShake.EntityId? repositoryId = default !;
            _entityStore.Update(session =>
            {
                repositoryId = UpdateIGetFile_RepositoryEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "repository"), entityIds);
                snapshot = session.CurrentSnapshot;
            });
            var resultInfo = new GetFileResultInfo(repositoryId, entityIds, snapshot.Version);
            return (_resultDataFactory.Create(resultInfo), resultInfo);
        }

        private global::StrawberryShake.EntityId? UpdateIGetFile_RepositoryEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Repository", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::RepositoryAnalysis.Internal.GraphQL.State.RepositoryEntity? entity))
                {
                    session.SetEntity(entityId, new global::RepositoryAnalysis.Internal.GraphQL.State.RepositoryEntity(entity.UpdatedAt, entity.PushedAt, entity.Discussions, entity.IsSecurityPolicyEnabled, entity.SecurityPolicyUrl, entity.HasVulnerabilityAlertsEnabled, entity.VulnerabilityAlerts, entity.Releases, entity.DiskUsage, entity.RepositoryTopics, entity.CodeOfConduct, entity.Codeowners, entity.DefaultBranchRef, entity.Description, entity.HasDiscussionsEnabled, entity.HasIssuesEnabled, entity.IsArchived, entity.IsEmpty, entity.IsLocked, entity.IssueTemplates, entity.LicenseInfo, entity.OpenGraphImageUrl, entity.PrimaryLanguage, entity.PullRequestTemplates, entity.Url, entity.PullRequests, entity.Issues, UpdateIGetFile_Repository_FileEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "file"), entityIds)));
                }
                else
                {
                    session.SetEntity(entityId, new global::RepositoryAnalysis.Internal.GraphQL.State.RepositoryEntity(default !, default !, default !, default !, default !, default !, default !, default !, default !, default !, default !, default !, default !, default !, default !, default !, default !, default !, default !, default !, default !, default !, default !, default !, default !, default !, default !, UpdateIGetFile_Repository_FileEntity(session, global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "file"), entityIds)));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::StrawberryShake.EntityId? UpdateIGetFile_Repository_FileEntity(global::StrawberryShake.IEntityStoreUpdateSession session, global::System.Text.Json.JsonElement? obj, global::System.Collections.Generic.ISet<global::StrawberryShake.EntityId> entityIds)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            global::StrawberryShake.EntityId entityId = _idSerializer.Parse(obj.Value);
            entityIds.Add(entityId);
            if (entityId.Name.Equals("Blob", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::RepositoryAnalysis.Internal.GraphQL.State.BlobEntity? entity))
                {
                    session.SetEntity(entityId, new global::RepositoryAnalysis.Internal.GraphQL.State.BlobEntity(entity.CommitResourcePath, DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text"))));
                }
                else
                {
                    session.SetEntity(entityId, new global::RepositoryAnalysis.Internal.GraphQL.State.BlobEntity(default !, DeserializeString(global::StrawberryShake.Json.JsonElementExtensions.GetPropertyOrNull(obj, "text"))));
                }

                return entityId;
            }

            if (entityId.Name.Equals("Commit", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::RepositoryAnalysis.Internal.GraphQL.State.CommitEntity? entity))
                {
                    session.SetEntity(entityId, new global::RepositoryAnalysis.Internal.GraphQL.State.CommitEntity(entity.CommitResourcePath));
                }
                else
                {
                    session.SetEntity(entityId, new global::RepositoryAnalysis.Internal.GraphQL.State.CommitEntity(default !));
                }

                return entityId;
            }

            if (entityId.Name.Equals("Tag", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::RepositoryAnalysis.Internal.GraphQL.State.TagEntity? entity))
                {
                    session.SetEntity(entityId, new global::RepositoryAnalysis.Internal.GraphQL.State.TagEntity(entity.CommitResourcePath));
                }
                else
                {
                    session.SetEntity(entityId, new global::RepositoryAnalysis.Internal.GraphQL.State.TagEntity(default !));
                }

                return entityId;
            }

            if (entityId.Name.Equals("Tree", global::System.StringComparison.Ordinal))
            {
                if (session.CurrentSnapshot.TryGetEntity(entityId, out global::RepositoryAnalysis.Internal.GraphQL.State.TreeEntity? entity))
                {
                    session.SetEntity(entityId, new global::RepositoryAnalysis.Internal.GraphQL.State.TreeEntity(entity.CommitResourcePath));
                }
                else
                {
                    session.SetEntity(entityId, new global::RepositoryAnalysis.Internal.GraphQL.State.TreeEntity(default !));
                }

                return entityId;
            }

            throw new global::System.NotSupportedException();
        }

        private global::System.String? DeserializeString(global::System.Text.Json.JsonElement? obj)
        {
            if (!obj.HasValue)
            {
                return null;
            }

            return _stringParser.Parse(obj.Value.GetString()!);
        }
    }

    ///<summary>The connection type for Discussion.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class DiscussionConnectionData
    {
        public DiscussionConnectionData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::RepositoryAnalysis.Internal.GraphQL.State.DiscussionEdgeData?>? edges = default !, global::System.Int32? totalCount = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Edges = edges;
            TotalCount = totalCount;
        }

        public global::System.String __typename { get; }

        ///<summary>A list of edges.</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::RepositoryAnalysis.Internal.GraphQL.State.DiscussionEdgeData?>? Edges { get; }

        ///<summary>Identifies the total count of items in the connection.</summary>
        public global::System.Int32? TotalCount { get; }
    }

    ///<summary>The connection type for RepositoryVulnerabilityAlert.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class RepositoryVulnerabilityAlertConnectionData
    {
        public RepositoryVulnerabilityAlertConnectionData(global::System.String __typename, global::System.Int32? totalCount = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            TotalCount = totalCount;
        }

        public global::System.String __typename { get; }

        ///<summary>Identifies the total count of items in the connection.</summary>
        public global::System.Int32? TotalCount { get; }
    }

    ///<summary>The connection type for Release.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class ReleaseConnectionData
    {
        public ReleaseConnectionData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::RepositoryAnalysis.Internal.GraphQL.State.ReleaseEdgeData?>? edges = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Edges = edges;
        }

        public global::System.String __typename { get; }

        ///<summary>A list of edges.</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::RepositoryAnalysis.Internal.GraphQL.State.ReleaseEdgeData?>? Edges { get; }
    }

    ///<summary>The connection type for RepositoryTopic.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class RepositoryTopicConnectionData
    {
        public RepositoryTopicConnectionData(global::System.String __typename, global::System.Int32? totalCount = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            TotalCount = totalCount;
        }

        public global::System.String __typename { get; }

        ///<summary>Identifies the total count of items in the connection.</summary>
        public global::System.Int32? TotalCount { get; }
    }

    ///<summary>Information extracted from a repository's `CODEOWNERS` file.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class RepositoryCodeownersData
    {
        public RepositoryCodeownersData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::RepositoryAnalysis.Internal.GraphQL.State.RepositoryCodeownersErrorData>? errors = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Errors = errors;
        }

        public global::System.String __typename { get; }

        ///<summary>Any problems that were encountered while parsing the `CODEOWNERS` file.</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::RepositoryAnalysis.Internal.GraphQL.State.RepositoryCodeownersErrorData>? Errors { get; }
    }

    ///<summary>A repository issue template.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class IssueTemplateData
    {
        public IssueTemplateData(global::System.String __typename, global::System.String? name = default !, global::System.String? filename = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Name = name;
            Filename = filename;
        }

        public global::System.String __typename { get; }

        ///<summary>The template name.</summary>
        public global::System.String? Name { get; }

        ///<summary>The template filename.</summary>
        public global::System.String? Filename { get; }
    }

    ///<summary>A repository pull request template.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class PullRequestTemplateData
    {
        public PullRequestTemplateData(global::System.String __typename, global::System.String? filename = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Filename = filename;
        }

        public global::System.String __typename { get; }

        ///<summary>The filename of the template</summary>
        public global::System.String? Filename { get; }
    }

    ///<summary>The connection type for PullRequest.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class PullRequestConnectionData
    {
        public PullRequestConnectionData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? nodes = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Nodes = nodes;
        }

        public global::System.String __typename { get; }

        ///<summary>A list of nodes.</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::StrawberryShake.EntityId?>? Nodes { get; }
    }

    ///<summary>The connection type for Issue.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class IssueConnectionData
    {
        public IssueConnectionData(global::System.String __typename, global::System.Collections.Generic.IReadOnlyList<global::RepositoryAnalysis.Internal.GraphQL.State.IssueEdgeData?>? edges = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Edges = edges;
        }

        public global::System.String __typename { get; }

        ///<summary>A list of edges.</summary>
        public global::System.Collections.Generic.IReadOnlyList<global::RepositoryAnalysis.Internal.GraphQL.State.IssueEdgeData?>? Edges { get; }
    }

    ///<summary>An edge in a connection.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class DiscussionEdgeData
    {
        public DiscussionEdgeData(global::System.String __typename, global::StrawberryShake.EntityId? node = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Node = node;
        }

        public global::System.String __typename { get; }

        ///<summary>The item at the end of the edge.</summary>
        public global::StrawberryShake.EntityId? Node { get; }
    }

    ///<summary>An edge in a connection.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class ReleaseEdgeData
    {
        public ReleaseEdgeData(global::System.String __typename, global::StrawberryShake.EntityId? node = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Node = node;
        }

        public global::System.String __typename { get; }

        ///<summary>The item at the end of the edge.</summary>
        public global::StrawberryShake.EntityId? Node { get; }
    }

    ///<summary>An error in a `CODEOWNERS` file.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class RepositoryCodeownersErrorData
    {
        public RepositoryCodeownersErrorData(global::System.String __typename, global::System.String? kind = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Kind = kind;
        }

        public global::System.String __typename { get; }

        ///<summary>A short string describing the type of error.</summary>
        public global::System.String? Kind { get; }
    }

    ///<summary>An edge in a connection.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class IssueEdgeData
    {
        public IssueEdgeData(global::System.String __typename, global::StrawberryShake.EntityId? node = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            Node = node;
        }

        public global::System.String __typename { get; }

        ///<summary>The item at the end of the edge.</summary>
        public global::StrawberryShake.EntityId? Node { get; }
    }

    ///<summary>The connection type for Label.</summary>
    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class LabelConnectionData
    {
        public LabelConnectionData(global::System.String __typename, global::System.Int32? totalCount = default !)
        {
            this.__typename = __typename ?? throw new global::System.ArgumentNullException(nameof(__typename));
            TotalCount = totalCount;
        }

        public global::System.String __typename { get; }

        ///<summary>Identifies the total count of items in the connection.</summary>
        public global::System.Int32? TotalCount { get; }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GithubClientEntityIdFactory : global::StrawberryShake.IEntityIdSerializer
    {
        private static readonly global::System.Text.Json.JsonWriterOptions _options = new global::System.Text.Json.JsonWriterOptions()
        {Indented = false};
        public global::StrawberryShake.EntityId Parse(global::System.Text.Json.JsonElement obj)
        {
            global::System.String __typename = obj.GetProperty("__typename").GetString()!;
            return __typename switch
            {
                "Repository" => ParseRepositoryEntityId(obj, __typename),
                "CodeOfConduct" => ParseCodeOfConductEntityId(obj, __typename),
                "Ref" => ParseRefEntityId(obj, __typename),
                "License" => ParseLicenseEntityId(obj, __typename),
                "Language" => ParseLanguageEntityId(obj, __typename),
                "Blob" => ParseBlobEntityId(obj, __typename),
                "Commit" => ParseCommitEntityId(obj, __typename),
                "Tag" => ParseTagEntityId(obj, __typename),
                "Tree" => ParseTreeEntityId(obj, __typename),
                "BranchProtectionRule" => ParseBranchProtectionRuleEntityId(obj, __typename),
                "PullRequest" => ParsePullRequestEntityId(obj, __typename),
                "Discussion" => ParseDiscussionEntityId(obj, __typename),
                "Release" => ParseReleaseEntityId(obj, __typename),
                "Issue" => ParseIssueEntityId(obj, __typename),
                "DiscussionComment" => ParseDiscussionCommentEntityId(obj, __typename),
                _ => throw new global::System.NotSupportedException()};
        }

        public global::System.String Format(global::StrawberryShake.EntityId entityId)
        {
            return entityId.Name switch
            {
                "Repository" => FormatRepositoryEntityId(entityId),
                "CodeOfConduct" => FormatCodeOfConductEntityId(entityId),
                "Ref" => FormatRefEntityId(entityId),
                "License" => FormatLicenseEntityId(entityId),
                "Language" => FormatLanguageEntityId(entityId),
                "Blob" => FormatBlobEntityId(entityId),
                "Commit" => FormatCommitEntityId(entityId),
                "Tag" => FormatTagEntityId(entityId),
                "Tree" => FormatTreeEntityId(entityId),
                "BranchProtectionRule" => FormatBranchProtectionRuleEntityId(entityId),
                "PullRequest" => FormatPullRequestEntityId(entityId),
                "Discussion" => FormatDiscussionEntityId(entityId),
                "Release" => FormatReleaseEntityId(entityId),
                "Issue" => FormatIssueEntityId(entityId),
                "DiscussionComment" => FormatDiscussionCommentEntityId(entityId),
                _ => throw new global::System.NotSupportedException()};
        }

        private global::StrawberryShake.EntityId ParseRepositoryEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatRepositoryEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseCodeOfConductEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatCodeOfConductEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseRefEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatRefEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseLicenseEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatLicenseEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseLanguageEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatLanguageEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseBlobEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatBlobEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseCommitEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatCommitEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseTagEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatTagEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseTreeEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatTreeEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseBranchProtectionRuleEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatBranchProtectionRuleEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParsePullRequestEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatPullRequestEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseDiscussionEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatDiscussionEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseReleaseEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatReleaseEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseIssueEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatIssueEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }

        private global::StrawberryShake.EntityId ParseDiscussionCommentEntityId(global::System.Text.Json.JsonElement obj, global::System.String type)
        {
            return new global::StrawberryShake.EntityId(type, obj.GetProperty("id").GetString()!);
        }

        private global::System.String FormatDiscussionCommentEntityId(global::StrawberryShake.EntityId entityId)
        {
            using var writer = new global::StrawberryShake.Internal.ArrayWriter();
            using var jsonWriter = new global::System.Text.Json.Utf8JsonWriter(writer, _options);
            jsonWriter.WriteStartObject();
            jsonWriter.WriteString("__typename", entityId.Name);
            jsonWriter.WriteString("id", (global::System.String)entityId.Value);
            jsonWriter.WriteEndObject();
            jsonWriter.Flush();
            return global::System.Text.Encoding.UTF8.GetString(writer.GetInternalBuffer(), 0, writer.Length);
        }
    }

    [global::System.CodeDom.Compiler.GeneratedCode("StrawberryShake", "12.15.2.0")]
    public partial class GithubClientStoreAccessor : global::StrawberryShake.StoreAccessor
    {
        public GithubClientStoreAccessor(global::StrawberryShake.IOperationStore operationStore, global::StrawberryShake.IEntityStore entityStore, global::StrawberryShake.IEntityIdSerializer entityIdSerializer, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationRequestFactory> requestFactories, global::System.Collections.Generic.IEnumerable<global::StrawberryShake.IOperationResultDataFactory> resultDataFactories) : base(operationStore, entityStore, entityIdSerializer, requestFactories, resultDataFactories)
        {
        }
    }
}
