using RepositoryAnalysis.Model;

namespace RepositoryAnalysis.Internal.Rules.Security;

internal class VulnerabilityAlertsRuleApplicator : IRuleApplicator
{
    public string RuleName => "vulnerability alerts";
    public RuleCategory Category => RuleCategory.Security;
    public Language Language => Language.None;

    public async Task<Rule> ApplyAsync(
        AnalysisContext context) => await Task.FromResult(Apply(context));

    private Rule Apply(
        AnalysisContext context)
    {
        var (diagnosis, note) = GetDiagnosis();

        return new Rule
        {
            Name = RuleName,
            Category = Category,
            Diagnosis = diagnosis,
            Note = note,
            Explanation = new Explanation
            {
                Details = null,
                Text = @"
If your code depends on a package with a security vulnerability, 
this can cause a range of problems for your project or the people who use it. 
You should upgrade to a secure version of the package as soon as possible. 
If your code uses malware, you need to replace the package with a secure alternative.
",
                AboutUrl =
                    "https://docs.github.com/en/code-security/dependabot/dependabot-alerts/about-dependabot-alerts",
                AboutHeader = "about vulnerability alerts",
                GuidanceUrl = "https://docs.github.com/en/code-security/dependabot/dependabot-alerts/configuring-dependabot-alerts",
                GuidanceHeader = "how to configure alerts"
            }
        };

        (Diagnosis, string) GetDiagnosis()
        {
            if (context.Repo.HasVulnerabilityAlertsEnabled)
                return context.Repo.VulnerabilityAlerts is null
                    ? (Diagnosis.Info, "vulnerability alerts are enabled")
                    : (Diagnosis.Info, $"vulnerability alerts are enabled, found {context.Repo.VulnerabilityAlerts.TotalCount} alerts");

            return (Diagnosis.Warning, "vulnerability alerts are disabled");
        }
    }
}